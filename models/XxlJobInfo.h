/**
 *
 *  XxlJobInfo.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#include <drogon/orm/BaseBuilder.h>
#ifdef __cpp_impl_coroutine
#include <drogon/orm/CoroMapper.h>
#endif
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <string_view>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

namespace drogon
{
namespace orm
{
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
}
}
namespace drogon_model
{
namespace xxl_job
{

class XxlJobInfo
{
  public:
    struct Cols
    {
        static const std::string _id;
        static const std::string _job_group;
        static const std::string _job_desc;
        static const std::string _add_time;
        static const std::string _update_time;
        static const std::string _author;
        static const std::string _alarm_email;
        static const std::string _schedule_type;
        static const std::string _schedule_conf;
        static const std::string _misfire_strategy;
        static const std::string _executor_route_strategy;
        static const std::string _executor_handler;
        static const std::string _executor_param;
        static const std::string _executor_block_strategy;
        static const std::string _executor_timeout;
        static const std::string _executor_fail_retry_count;
        static const std::string _glue_type;
        static const std::string _glue_source;
        static const std::string _glue_remark;
        static const std::string _glue_updatetime;
        static const std::string _child_jobid;
        static const std::string _trigger_status;
        static const std::string _trigger_last_time;
        static const std::string _trigger_next_time;
    };

    static const int primaryKeyNumber;
    static const std::string tableName;
    static const bool hasPrimaryKey;
    static const std::string primaryKeyName;
    using PrimaryKeyType = int32_t;
    const PrimaryKeyType &getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names,
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all
     * columns by an asterisk), please set the offset to -1.
     */
    explicit XxlJobInfo(const drogon::orm::Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit XxlJobInfo(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    XxlJobInfo(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    XxlJobInfo() = default;

    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err);
    static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    static bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson,
                          std::string &err,
                          bool isForCreation);

    /**  For column id  */
    ///Get the value of the column id, returns the default value if the column is null
    const int32_t &getValueOfId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getId() const noexcept;
    ///Set the value of the column id
    void setId(const int32_t &pId) noexcept;

    /**  For column job_group  */
    ///Get the value of the column job_group, returns the default value if the column is null
    const int32_t &getValueOfJobGroup() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getJobGroup() const noexcept;
    ///Set the value of the column job_group
    void setJobGroup(const int32_t &pJobGroup) noexcept;

    /**  For column job_desc  */
    ///Get the value of the column job_desc, returns the default value if the column is null
    const std::string &getValueOfJobDesc() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getJobDesc() const noexcept;
    ///Set the value of the column job_desc
    void setJobDesc(const std::string &pJobDesc) noexcept;
    void setJobDesc(std::string &&pJobDesc) noexcept;

    /**  For column add_time  */
    ///Get the value of the column add_time, returns the default value if the column is null
    const ::trantor::Date &getValueOfAddTime() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getAddTime() const noexcept;
    ///Set the value of the column add_time
    void setAddTime(const ::trantor::Date &pAddTime) noexcept;
    void setAddTimeToNull() noexcept;

    /**  For column update_time  */
    ///Get the value of the column update_time, returns the default value if the column is null
    const ::trantor::Date &getValueOfUpdateTime() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getUpdateTime() const noexcept;
    ///Set the value of the column update_time
    void setUpdateTime(const ::trantor::Date &pUpdateTime) noexcept;
    void setUpdateTimeToNull() noexcept;

    /**  For column author  */
    ///Get the value of the column author, returns the default value if the column is null
    const std::string &getValueOfAuthor() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getAuthor() const noexcept;
    ///Set the value of the column author
    void setAuthor(const std::string &pAuthor) noexcept;
    void setAuthor(std::string &&pAuthor) noexcept;
    void setAuthorToNull() noexcept;

    /**  For column alarm_email  */
    ///Get the value of the column alarm_email, returns the default value if the column is null
    const std::string &getValueOfAlarmEmail() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getAlarmEmail() const noexcept;
    ///Set the value of the column alarm_email
    void setAlarmEmail(const std::string &pAlarmEmail) noexcept;
    void setAlarmEmail(std::string &&pAlarmEmail) noexcept;
    void setAlarmEmailToNull() noexcept;

    /**  For column schedule_type  */
    ///Get the value of the column schedule_type, returns the default value if the column is null
    const std::string &getValueOfScheduleType() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getScheduleType() const noexcept;
    ///Set the value of the column schedule_type
    void setScheduleType(const std::string &pScheduleType) noexcept;
    void setScheduleType(std::string &&pScheduleType) noexcept;

    /**  For column schedule_conf  */
    ///Get the value of the column schedule_conf, returns the default value if the column is null
    const std::string &getValueOfScheduleConf() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getScheduleConf() const noexcept;
    ///Set the value of the column schedule_conf
    void setScheduleConf(const std::string &pScheduleConf) noexcept;
    void setScheduleConf(std::string &&pScheduleConf) noexcept;
    void setScheduleConfToNull() noexcept;

    /**  For column misfire_strategy  */
    ///Get the value of the column misfire_strategy, returns the default value if the column is null
    const std::string &getValueOfMisfireStrategy() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getMisfireStrategy() const noexcept;
    ///Set the value of the column misfire_strategy
    void setMisfireStrategy(const std::string &pMisfireStrategy) noexcept;
    void setMisfireStrategy(std::string &&pMisfireStrategy) noexcept;

    /**  For column executor_route_strategy  */
    ///Get the value of the column executor_route_strategy, returns the default value if the column is null
    const std::string &getValueOfExecutorRouteStrategy() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getExecutorRouteStrategy() const noexcept;
    ///Set the value of the column executor_route_strategy
    void setExecutorRouteStrategy(const std::string &pExecutorRouteStrategy) noexcept;
    void setExecutorRouteStrategy(std::string &&pExecutorRouteStrategy) noexcept;
    void setExecutorRouteStrategyToNull() noexcept;

    /**  For column executor_handler  */
    ///Get the value of the column executor_handler, returns the default value if the column is null
    const std::string &getValueOfExecutorHandler() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getExecutorHandler() const noexcept;
    ///Set the value of the column executor_handler
    void setExecutorHandler(const std::string &pExecutorHandler) noexcept;
    void setExecutorHandler(std::string &&pExecutorHandler) noexcept;
    void setExecutorHandlerToNull() noexcept;

    /**  For column executor_param  */
    ///Get the value of the column executor_param, returns the default value if the column is null
    const std::string &getValueOfExecutorParam() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getExecutorParam() const noexcept;
    ///Set the value of the column executor_param
    void setExecutorParam(const std::string &pExecutorParam) noexcept;
    void setExecutorParam(std::string &&pExecutorParam) noexcept;
    void setExecutorParamToNull() noexcept;

    /**  For column executor_block_strategy  */
    ///Get the value of the column executor_block_strategy, returns the default value if the column is null
    const std::string &getValueOfExecutorBlockStrategy() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getExecutorBlockStrategy() const noexcept;
    ///Set the value of the column executor_block_strategy
    void setExecutorBlockStrategy(const std::string &pExecutorBlockStrategy) noexcept;
    void setExecutorBlockStrategy(std::string &&pExecutorBlockStrategy) noexcept;
    void setExecutorBlockStrategyToNull() noexcept;

    /**  For column executor_timeout  */
    ///Get the value of the column executor_timeout, returns the default value if the column is null
    const int32_t &getValueOfExecutorTimeout() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getExecutorTimeout() const noexcept;
    ///Set the value of the column executor_timeout
    void setExecutorTimeout(const int32_t &pExecutorTimeout) noexcept;

    /**  For column executor_fail_retry_count  */
    ///Get the value of the column executor_fail_retry_count, returns the default value if the column is null
    const int32_t &getValueOfExecutorFailRetryCount() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getExecutorFailRetryCount() const noexcept;
    ///Set the value of the column executor_fail_retry_count
    void setExecutorFailRetryCount(const int32_t &pExecutorFailRetryCount) noexcept;

    /**  For column glue_type  */
    ///Get the value of the column glue_type, returns the default value if the column is null
    const std::string &getValueOfGlueType() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getGlueType() const noexcept;
    ///Set the value of the column glue_type
    void setGlueType(const std::string &pGlueType) noexcept;
    void setGlueType(std::string &&pGlueType) noexcept;

    /**  For column glue_source  */
    ///Get the value of the column glue_source, returns the default value if the column is null
    const std::string &getValueOfGlueSource() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getGlueSource() const noexcept;
    ///Set the value of the column glue_source
    void setGlueSource(const std::string &pGlueSource) noexcept;
    void setGlueSource(std::string &&pGlueSource) noexcept;
    void setGlueSourceToNull() noexcept;

    /**  For column glue_remark  */
    ///Get the value of the column glue_remark, returns the default value if the column is null
    const std::string &getValueOfGlueRemark() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getGlueRemark() const noexcept;
    ///Set the value of the column glue_remark
    void setGlueRemark(const std::string &pGlueRemark) noexcept;
    void setGlueRemark(std::string &&pGlueRemark) noexcept;
    void setGlueRemarkToNull() noexcept;

    /**  For column glue_updatetime  */
    ///Get the value of the column glue_updatetime, returns the default value if the column is null
    const ::trantor::Date &getValueOfGlueUpdatetime() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getGlueUpdatetime() const noexcept;
    ///Set the value of the column glue_updatetime
    void setGlueUpdatetime(const ::trantor::Date &pGlueUpdatetime) noexcept;
    void setGlueUpdatetimeToNull() noexcept;

    /**  For column child_jobid  */
    ///Get the value of the column child_jobid, returns the default value if the column is null
    const std::string &getValueOfChildJobid() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getChildJobid() const noexcept;
    ///Set the value of the column child_jobid
    void setChildJobid(const std::string &pChildJobid) noexcept;
    void setChildJobid(std::string &&pChildJobid) noexcept;
    void setChildJobidToNull() noexcept;

    /**  For column trigger_status  */
    ///Get the value of the column trigger_status, returns the default value if the column is null
    const int8_t &getValueOfTriggerStatus() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int8_t> &getTriggerStatus() const noexcept;
    ///Set the value of the column trigger_status
    void setTriggerStatus(const int8_t &pTriggerStatus) noexcept;

    /**  For column trigger_last_time  */
    ///Get the value of the column trigger_last_time, returns the default value if the column is null
    const int64_t &getValueOfTriggerLastTime() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int64_t> &getTriggerLastTime() const noexcept;
    ///Set the value of the column trigger_last_time
    void setTriggerLastTime(const int64_t &pTriggerLastTime) noexcept;

    /**  For column trigger_next_time  */
    ///Get the value of the column trigger_next_time, returns the default value if the column is null
    const int64_t &getValueOfTriggerNextTime() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int64_t> &getTriggerNextTime() const noexcept;
    ///Set the value of the column trigger_next_time
    void setTriggerNextTime(const int64_t &pTriggerNextTime) noexcept;


    static size_t getColumnNumber() noexcept {  return 24;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
    /// Relationship interfaces
  private:
    friend drogon::orm::Mapper<XxlJobInfo>;
    friend drogon::orm::BaseBuilder<XxlJobInfo, true, true>;
    friend drogon::orm::BaseBuilder<XxlJobInfo, true, false>;
    friend drogon::orm::BaseBuilder<XxlJobInfo, false, true>;
    friend drogon::orm::BaseBuilder<XxlJobInfo, false, false>;
#ifdef __cpp_impl_coroutine
    friend drogon::orm::CoroMapper<XxlJobInfo>;
#endif
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<int32_t> id_;
    std::shared_ptr<int32_t> jobGroup_;
    std::shared_ptr<std::string> jobDesc_;
    std::shared_ptr<::trantor::Date> addTime_;
    std::shared_ptr<::trantor::Date> updateTime_;
    std::shared_ptr<std::string> author_;
    std::shared_ptr<std::string> alarmEmail_;
    std::shared_ptr<std::string> scheduleType_;
    std::shared_ptr<std::string> scheduleConf_;
    std::shared_ptr<std::string> misfireStrategy_;
    std::shared_ptr<std::string> executorRouteStrategy_;
    std::shared_ptr<std::string> executorHandler_;
    std::shared_ptr<std::string> executorParam_;
    std::shared_ptr<std::string> executorBlockStrategy_;
    std::shared_ptr<int32_t> executorTimeout_;
    std::shared_ptr<int32_t> executorFailRetryCount_;
    std::shared_ptr<std::string> glueType_;
    std::shared_ptr<std::string> glueSource_;
    std::shared_ptr<std::string> glueRemark_;
    std::shared_ptr<::trantor::Date> glueUpdatetime_;
    std::shared_ptr<std::string> childJobid_;
    std::shared_ptr<int8_t> triggerStatus_;
    std::shared_ptr<int64_t> triggerLastTime_;
    std::shared_ptr<int64_t> triggerNextTime_;
    struct MetaData
    {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[24]={ false };
  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="select * from " + tableName + " where id = ?";
        return sql;
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="delete from " + tableName + " where id = ?";
        return sql;
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
            sql += "id,";
            ++parametersCount;
        if(dirtyFlag_[1])
        {
            sql += "job_group,";
            ++parametersCount;
        }
        if(dirtyFlag_[2])
        {
            sql += "job_desc,";
            ++parametersCount;
        }
        if(dirtyFlag_[3])
        {
            sql += "add_time,";
            ++parametersCount;
        }
        if(dirtyFlag_[4])
        {
            sql += "update_time,";
            ++parametersCount;
        }
        if(dirtyFlag_[5])
        {
            sql += "author,";
            ++parametersCount;
        }
        if(dirtyFlag_[6])
        {
            sql += "alarm_email,";
            ++parametersCount;
        }
        sql += "schedule_type,";
        ++parametersCount;
        if(!dirtyFlag_[7])
        {
            needSelection=true;
        }
        if(dirtyFlag_[8])
        {
            sql += "schedule_conf,";
            ++parametersCount;
        }
        sql += "misfire_strategy,";
        ++parametersCount;
        if(!dirtyFlag_[9])
        {
            needSelection=true;
        }
        if(dirtyFlag_[10])
        {
            sql += "executor_route_strategy,";
            ++parametersCount;
        }
        if(dirtyFlag_[11])
        {
            sql += "executor_handler,";
            ++parametersCount;
        }
        if(dirtyFlag_[12])
        {
            sql += "executor_param,";
            ++parametersCount;
        }
        if(dirtyFlag_[13])
        {
            sql += "executor_block_strategy,";
            ++parametersCount;
        }
        sql += "executor_timeout,";
        ++parametersCount;
        if(!dirtyFlag_[14])
        {
            needSelection=true;
        }
        sql += "executor_fail_retry_count,";
        ++parametersCount;
        if(!dirtyFlag_[15])
        {
            needSelection=true;
        }
        if(dirtyFlag_[16])
        {
            sql += "glue_type,";
            ++parametersCount;
        }
        if(dirtyFlag_[17])
        {
            sql += "glue_source,";
            ++parametersCount;
        }
        if(dirtyFlag_[18])
        {
            sql += "glue_remark,";
            ++parametersCount;
        }
        if(dirtyFlag_[19])
        {
            sql += "glue_updatetime,";
            ++parametersCount;
        }
        if(dirtyFlag_[20])
        {
            sql += "child_jobid,";
            ++parametersCount;
        }
        sql += "trigger_status,";
        ++parametersCount;
        if(!dirtyFlag_[21])
        {
            needSelection=true;
        }
        sql += "trigger_last_time,";
        ++parametersCount;
        if(!dirtyFlag_[22])
        {
            needSelection=true;
        }
        sql += "trigger_next_time,";
        ++parametersCount;
        if(!dirtyFlag_[23])
        {
            needSelection=true;
        }
        needSelection=true;
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";

        sql +="default,";
        if(dirtyFlag_[1])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[2])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[3])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[4])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[5])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[6])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[7])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[8])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[9])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[10])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[11])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[12])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[13])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[14])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[15])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[16])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[17])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[18])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[19])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[20])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[21])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[22])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[23])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        sql.append(1, ')');
        LOG_TRACE << sql;
        return sql;
    }
};
} // namespace xxl_job
} // namespace drogon_model
