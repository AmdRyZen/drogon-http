/**
 *
 *  XxlJobLog.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "XxlJobLog.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::xxl_job;

const std::string XxlJobLog::Cols::_id = "id";
const std::string XxlJobLog::Cols::_job_group = "job_group";
const std::string XxlJobLog::Cols::_job_id = "job_id";
const std::string XxlJobLog::Cols::_executor_address = "executor_address";
const std::string XxlJobLog::Cols::_executor_handler = "executor_handler";
const std::string XxlJobLog::Cols::_executor_param = "executor_param";
const std::string XxlJobLog::Cols::_executor_sharding_param = "executor_sharding_param";
const std::string XxlJobLog::Cols::_executor_fail_retry_count = "executor_fail_retry_count";
const std::string XxlJobLog::Cols::_trigger_time = "trigger_time";
const std::string XxlJobLog::Cols::_trigger_code = "trigger_code";
const std::string XxlJobLog::Cols::_trigger_msg = "trigger_msg";
const std::string XxlJobLog::Cols::_handle_time = "handle_time";
const std::string XxlJobLog::Cols::_handle_code = "handle_code";
const std::string XxlJobLog::Cols::_handle_msg = "handle_msg";
const std::string XxlJobLog::Cols::_alarm_status = "alarm_status";
const std::string XxlJobLog::primaryKeyName = "id";
const bool XxlJobLog::hasPrimaryKey = true;
const std::string XxlJobLog::tableName = "xxl_job_log";

const std::vector<typename XxlJobLog::MetaData> XxlJobLog::metaData_={
{"id","int64_t","bigint(20)",8,1,1,1},
{"job_group","int32_t","int(11)",4,0,0,1},
{"job_id","int32_t","int(11)",4,0,0,1},
{"executor_address","std::string","varchar(255)",255,0,0,0},
{"executor_handler","std::string","varchar(255)",255,0,0,0},
{"executor_param","std::string","varchar(512)",512,0,0,0},
{"executor_sharding_param","std::string","varchar(20)",20,0,0,0},
{"executor_fail_retry_count","int32_t","int(11)",4,0,0,1},
{"trigger_time","::trantor::Date","datetime",0,0,0,0},
{"trigger_code","int32_t","int(11)",4,0,0,1},
{"trigger_msg","std::string","text",0,0,0,0},
{"handle_time","::trantor::Date","datetime",0,0,0,0},
{"handle_code","int32_t","int(11)",4,0,0,1},
{"handle_msg","std::string","text",0,0,0,0},
{"alarm_status","int8_t","tinyint(4)",1,0,0,1}
};
const std::string &XxlJobLog::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
XxlJobLog::XxlJobLog(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<int64_t>(r["id"].as<int64_t>());
        }
        if(!r["job_group"].isNull())
        {
            jobGroup_=std::make_shared<int32_t>(r["job_group"].as<int32_t>());
        }
        if(!r["job_id"].isNull())
        {
            jobId_=std::make_shared<int32_t>(r["job_id"].as<int32_t>());
        }
        if(!r["executor_address"].isNull())
        {
            executorAddress_=std::make_shared<std::string>(r["executor_address"].as<std::string>());
        }
        if(!r["executor_handler"].isNull())
        {
            executorHandler_=std::make_shared<std::string>(r["executor_handler"].as<std::string>());
        }
        if(!r["executor_param"].isNull())
        {
            executorParam_=std::make_shared<std::string>(r["executor_param"].as<std::string>());
        }
        if(!r["executor_sharding_param"].isNull())
        {
            executorShardingParam_=std::make_shared<std::string>(r["executor_sharding_param"].as<std::string>());
        }
        if(!r["executor_fail_retry_count"].isNull())
        {
            executorFailRetryCount_=std::make_shared<int32_t>(r["executor_fail_retry_count"].as<int32_t>());
        }
        if(!r["trigger_time"].isNull())
        {
            auto timeStr = r["trigger_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                triggerTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["trigger_code"].isNull())
        {
            triggerCode_=std::make_shared<int32_t>(r["trigger_code"].as<int32_t>());
        }
        if(!r["trigger_msg"].isNull())
        {
            triggerMsg_=std::make_shared<std::string>(r["trigger_msg"].as<std::string>());
        }
        if(!r["handle_time"].isNull())
        {
            auto timeStr = r["handle_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                handleTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["handle_code"].isNull())
        {
            handleCode_=std::make_shared<int32_t>(r["handle_code"].as<int32_t>());
        }
        if(!r["handle_msg"].isNull())
        {
            handleMsg_=std::make_shared<std::string>(r["handle_msg"].as<std::string>());
        }
        if(!r["alarm_status"].isNull())
        {
            alarmStatus_=std::make_shared<int8_t>(r["alarm_status"].as<int8_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 15 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            jobGroup_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            jobId_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            executorAddress_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            executorHandler_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            executorParam_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            executorShardingParam_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            executorFailRetryCount_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                triggerTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            triggerCode_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            triggerMsg_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                handleTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            handleCode_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 13;
        if(!r[index].isNull())
        {
            handleMsg_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 14;
        if(!r[index].isNull())
        {
            alarmStatus_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
    }

}

XxlJobLog::XxlJobLog(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 15)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            jobGroup_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            jobId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            executorAddress_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            executorHandler_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            executorParam_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            executorShardingParam_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            executorFailRetryCount_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[7]].asInt64());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[8]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                triggerTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            triggerCode_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[9]].asInt64());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            triggerMsg_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[11]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                handleTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            handleCode_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[12]].asInt64());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            handleMsg_=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            alarmStatus_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[14]].asInt64());
        }
    }
}

XxlJobLog::XxlJobLog(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("job_group"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["job_group"].isNull())
        {
            jobGroup_=std::make_shared<int32_t>((int32_t)pJson["job_group"].asInt64());
        }
    }
    if(pJson.isMember("job_id"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["job_id"].isNull())
        {
            jobId_=std::make_shared<int32_t>((int32_t)pJson["job_id"].asInt64());
        }
    }
    if(pJson.isMember("executor_address"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["executor_address"].isNull())
        {
            executorAddress_=std::make_shared<std::string>(pJson["executor_address"].asString());
        }
    }
    if(pJson.isMember("executor_handler"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["executor_handler"].isNull())
        {
            executorHandler_=std::make_shared<std::string>(pJson["executor_handler"].asString());
        }
    }
    if(pJson.isMember("executor_param"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["executor_param"].isNull())
        {
            executorParam_=std::make_shared<std::string>(pJson["executor_param"].asString());
        }
    }
    if(pJson.isMember("executor_sharding_param"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["executor_sharding_param"].isNull())
        {
            executorShardingParam_=std::make_shared<std::string>(pJson["executor_sharding_param"].asString());
        }
    }
    if(pJson.isMember("executor_fail_retry_count"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["executor_fail_retry_count"].isNull())
        {
            executorFailRetryCount_=std::make_shared<int32_t>((int32_t)pJson["executor_fail_retry_count"].asInt64());
        }
    }
    if(pJson.isMember("trigger_time"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["trigger_time"].isNull())
        {
            auto timeStr = pJson["trigger_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                triggerTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("trigger_code"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["trigger_code"].isNull())
        {
            triggerCode_=std::make_shared<int32_t>((int32_t)pJson["trigger_code"].asInt64());
        }
    }
    if(pJson.isMember("trigger_msg"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["trigger_msg"].isNull())
        {
            triggerMsg_=std::make_shared<std::string>(pJson["trigger_msg"].asString());
        }
    }
    if(pJson.isMember("handle_time"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["handle_time"].isNull())
        {
            auto timeStr = pJson["handle_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                handleTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("handle_code"))
    {
        dirtyFlag_[12]=true;
        if(!pJson["handle_code"].isNull())
        {
            handleCode_=std::make_shared<int32_t>((int32_t)pJson["handle_code"].asInt64());
        }
    }
    if(pJson.isMember("handle_msg"))
    {
        dirtyFlag_[13]=true;
        if(!pJson["handle_msg"].isNull())
        {
            handleMsg_=std::make_shared<std::string>(pJson["handle_msg"].asString());
        }
    }
    if(pJson.isMember("alarm_status"))
    {
        dirtyFlag_[14]=true;
        if(!pJson["alarm_status"].isNull())
        {
            alarmStatus_=std::make_shared<int8_t>((int8_t)pJson["alarm_status"].asInt64());
        }
    }
}

void XxlJobLog::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 15)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            jobGroup_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            jobId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            executorAddress_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            executorHandler_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            executorParam_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            executorShardingParam_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            executorFailRetryCount_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[7]].asInt64());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[8]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                triggerTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            triggerCode_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[9]].asInt64());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            triggerMsg_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[11]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                handleTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            handleCode_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[12]].asInt64());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            handleMsg_=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            alarmStatus_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[14]].asInt64());
        }
    }
}

void XxlJobLog::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("job_group"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["job_group"].isNull())
        {
            jobGroup_=std::make_shared<int32_t>((int32_t)pJson["job_group"].asInt64());
        }
    }
    if(pJson.isMember("job_id"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["job_id"].isNull())
        {
            jobId_=std::make_shared<int32_t>((int32_t)pJson["job_id"].asInt64());
        }
    }
    if(pJson.isMember("executor_address"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["executor_address"].isNull())
        {
            executorAddress_=std::make_shared<std::string>(pJson["executor_address"].asString());
        }
    }
    if(pJson.isMember("executor_handler"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["executor_handler"].isNull())
        {
            executorHandler_=std::make_shared<std::string>(pJson["executor_handler"].asString());
        }
    }
    if(pJson.isMember("executor_param"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["executor_param"].isNull())
        {
            executorParam_=std::make_shared<std::string>(pJson["executor_param"].asString());
        }
    }
    if(pJson.isMember("executor_sharding_param"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["executor_sharding_param"].isNull())
        {
            executorShardingParam_=std::make_shared<std::string>(pJson["executor_sharding_param"].asString());
        }
    }
    if(pJson.isMember("executor_fail_retry_count"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["executor_fail_retry_count"].isNull())
        {
            executorFailRetryCount_=std::make_shared<int32_t>((int32_t)pJson["executor_fail_retry_count"].asInt64());
        }
    }
    if(pJson.isMember("trigger_time"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["trigger_time"].isNull())
        {
            auto timeStr = pJson["trigger_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                triggerTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("trigger_code"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["trigger_code"].isNull())
        {
            triggerCode_=std::make_shared<int32_t>((int32_t)pJson["trigger_code"].asInt64());
        }
    }
    if(pJson.isMember("trigger_msg"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["trigger_msg"].isNull())
        {
            triggerMsg_=std::make_shared<std::string>(pJson["trigger_msg"].asString());
        }
    }
    if(pJson.isMember("handle_time"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["handle_time"].isNull())
        {
            auto timeStr = pJson["handle_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                handleTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("handle_code"))
    {
        dirtyFlag_[12] = true;
        if(!pJson["handle_code"].isNull())
        {
            handleCode_=std::make_shared<int32_t>((int32_t)pJson["handle_code"].asInt64());
        }
    }
    if(pJson.isMember("handle_msg"))
    {
        dirtyFlag_[13] = true;
        if(!pJson["handle_msg"].isNull())
        {
            handleMsg_=std::make_shared<std::string>(pJson["handle_msg"].asString());
        }
    }
    if(pJson.isMember("alarm_status"))
    {
        dirtyFlag_[14] = true;
        if(!pJson["alarm_status"].isNull())
        {
            alarmStatus_=std::make_shared<int8_t>((int8_t)pJson["alarm_status"].asInt64());
        }
    }
}

const int64_t &XxlJobLog::getValueOfId() const noexcept
{
    static const int64_t defaultValue = int64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &XxlJobLog::getId() const noexcept
{
    return id_;
}
void XxlJobLog::setId(const int64_t &pId) noexcept
{
    id_ = std::make_shared<int64_t>(pId);
    dirtyFlag_[0] = true;
}
const typename XxlJobLog::PrimaryKeyType & XxlJobLog::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const int32_t &XxlJobLog::getValueOfJobGroup() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(jobGroup_)
        return *jobGroup_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &XxlJobLog::getJobGroup() const noexcept
{
    return jobGroup_;
}
void XxlJobLog::setJobGroup(const int32_t &pJobGroup) noexcept
{
    jobGroup_ = std::make_shared<int32_t>(pJobGroup);
    dirtyFlag_[1] = true;
}

const int32_t &XxlJobLog::getValueOfJobId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(jobId_)
        return *jobId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &XxlJobLog::getJobId() const noexcept
{
    return jobId_;
}
void XxlJobLog::setJobId(const int32_t &pJobId) noexcept
{
    jobId_ = std::make_shared<int32_t>(pJobId);
    dirtyFlag_[2] = true;
}

const std::string &XxlJobLog::getValueOfExecutorAddress() const noexcept
{
    static const std::string defaultValue = std::string();
    if(executorAddress_)
        return *executorAddress_;
    return defaultValue;
}
const std::shared_ptr<std::string> &XxlJobLog::getExecutorAddress() const noexcept
{
    return executorAddress_;
}
void XxlJobLog::setExecutorAddress(const std::string &pExecutorAddress) noexcept
{
    executorAddress_ = std::make_shared<std::string>(pExecutorAddress);
    dirtyFlag_[3] = true;
}
void XxlJobLog::setExecutorAddress(std::string &&pExecutorAddress) noexcept
{
    executorAddress_ = std::make_shared<std::string>(std::move(pExecutorAddress));
    dirtyFlag_[3] = true;
}
void XxlJobLog::setExecutorAddressToNull() noexcept
{
    executorAddress_.reset();
    dirtyFlag_[3] = true;
}

const std::string &XxlJobLog::getValueOfExecutorHandler() const noexcept
{
    static const std::string defaultValue = std::string();
    if(executorHandler_)
        return *executorHandler_;
    return defaultValue;
}
const std::shared_ptr<std::string> &XxlJobLog::getExecutorHandler() const noexcept
{
    return executorHandler_;
}
void XxlJobLog::setExecutorHandler(const std::string &pExecutorHandler) noexcept
{
    executorHandler_ = std::make_shared<std::string>(pExecutorHandler);
    dirtyFlag_[4] = true;
}
void XxlJobLog::setExecutorHandler(std::string &&pExecutorHandler) noexcept
{
    executorHandler_ = std::make_shared<std::string>(std::move(pExecutorHandler));
    dirtyFlag_[4] = true;
}
void XxlJobLog::setExecutorHandlerToNull() noexcept
{
    executorHandler_.reset();
    dirtyFlag_[4] = true;
}

const std::string &XxlJobLog::getValueOfExecutorParam() const noexcept
{
    static const std::string defaultValue = std::string();
    if(executorParam_)
        return *executorParam_;
    return defaultValue;
}
const std::shared_ptr<std::string> &XxlJobLog::getExecutorParam() const noexcept
{
    return executorParam_;
}
void XxlJobLog::setExecutorParam(const std::string &pExecutorParam) noexcept
{
    executorParam_ = std::make_shared<std::string>(pExecutorParam);
    dirtyFlag_[5] = true;
}
void XxlJobLog::setExecutorParam(std::string &&pExecutorParam) noexcept
{
    executorParam_ = std::make_shared<std::string>(std::move(pExecutorParam));
    dirtyFlag_[5] = true;
}
void XxlJobLog::setExecutorParamToNull() noexcept
{
    executorParam_.reset();
    dirtyFlag_[5] = true;
}

const std::string &XxlJobLog::getValueOfExecutorShardingParam() const noexcept
{
    static const std::string defaultValue = std::string();
    if(executorShardingParam_)
        return *executorShardingParam_;
    return defaultValue;
}
const std::shared_ptr<std::string> &XxlJobLog::getExecutorShardingParam() const noexcept
{
    return executorShardingParam_;
}
void XxlJobLog::setExecutorShardingParam(const std::string &pExecutorShardingParam) noexcept
{
    executorShardingParam_ = std::make_shared<std::string>(pExecutorShardingParam);
    dirtyFlag_[6] = true;
}
void XxlJobLog::setExecutorShardingParam(std::string &&pExecutorShardingParam) noexcept
{
    executorShardingParam_ = std::make_shared<std::string>(std::move(pExecutorShardingParam));
    dirtyFlag_[6] = true;
}
void XxlJobLog::setExecutorShardingParamToNull() noexcept
{
    executorShardingParam_.reset();
    dirtyFlag_[6] = true;
}

const int32_t &XxlJobLog::getValueOfExecutorFailRetryCount() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(executorFailRetryCount_)
        return *executorFailRetryCount_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &XxlJobLog::getExecutorFailRetryCount() const noexcept
{
    return executorFailRetryCount_;
}
void XxlJobLog::setExecutorFailRetryCount(const int32_t &pExecutorFailRetryCount) noexcept
{
    executorFailRetryCount_ = std::make_shared<int32_t>(pExecutorFailRetryCount);
    dirtyFlag_[7] = true;
}

const ::trantor::Date &XxlJobLog::getValueOfTriggerTime() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(triggerTime_)
        return *triggerTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &XxlJobLog::getTriggerTime() const noexcept
{
    return triggerTime_;
}
void XxlJobLog::setTriggerTime(const ::trantor::Date &pTriggerTime) noexcept
{
    triggerTime_ = std::make_shared<::trantor::Date>(pTriggerTime);
    dirtyFlag_[8] = true;
}
void XxlJobLog::setTriggerTimeToNull() noexcept
{
    triggerTime_.reset();
    dirtyFlag_[8] = true;
}

const int32_t &XxlJobLog::getValueOfTriggerCode() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(triggerCode_)
        return *triggerCode_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &XxlJobLog::getTriggerCode() const noexcept
{
    return triggerCode_;
}
void XxlJobLog::setTriggerCode(const int32_t &pTriggerCode) noexcept
{
    triggerCode_ = std::make_shared<int32_t>(pTriggerCode);
    dirtyFlag_[9] = true;
}

const std::string &XxlJobLog::getValueOfTriggerMsg() const noexcept
{
    static const std::string defaultValue = std::string();
    if(triggerMsg_)
        return *triggerMsg_;
    return defaultValue;
}
const std::shared_ptr<std::string> &XxlJobLog::getTriggerMsg() const noexcept
{
    return triggerMsg_;
}
void XxlJobLog::setTriggerMsg(const std::string &pTriggerMsg) noexcept
{
    triggerMsg_ = std::make_shared<std::string>(pTriggerMsg);
    dirtyFlag_[10] = true;
}
void XxlJobLog::setTriggerMsg(std::string &&pTriggerMsg) noexcept
{
    triggerMsg_ = std::make_shared<std::string>(std::move(pTriggerMsg));
    dirtyFlag_[10] = true;
}
void XxlJobLog::setTriggerMsgToNull() noexcept
{
    triggerMsg_.reset();
    dirtyFlag_[10] = true;
}

const ::trantor::Date &XxlJobLog::getValueOfHandleTime() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(handleTime_)
        return *handleTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &XxlJobLog::getHandleTime() const noexcept
{
    return handleTime_;
}
void XxlJobLog::setHandleTime(const ::trantor::Date &pHandleTime) noexcept
{
    handleTime_ = std::make_shared<::trantor::Date>(pHandleTime);
    dirtyFlag_[11] = true;
}
void XxlJobLog::setHandleTimeToNull() noexcept
{
    handleTime_.reset();
    dirtyFlag_[11] = true;
}

const int32_t &XxlJobLog::getValueOfHandleCode() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(handleCode_)
        return *handleCode_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &XxlJobLog::getHandleCode() const noexcept
{
    return handleCode_;
}
void XxlJobLog::setHandleCode(const int32_t &pHandleCode) noexcept
{
    handleCode_ = std::make_shared<int32_t>(pHandleCode);
    dirtyFlag_[12] = true;
}

const std::string &XxlJobLog::getValueOfHandleMsg() const noexcept
{
    static const std::string defaultValue = std::string();
    if(handleMsg_)
        return *handleMsg_;
    return defaultValue;
}
const std::shared_ptr<std::string> &XxlJobLog::getHandleMsg() const noexcept
{
    return handleMsg_;
}
void XxlJobLog::setHandleMsg(const std::string &pHandleMsg) noexcept
{
    handleMsg_ = std::make_shared<std::string>(pHandleMsg);
    dirtyFlag_[13] = true;
}
void XxlJobLog::setHandleMsg(std::string &&pHandleMsg) noexcept
{
    handleMsg_ = std::make_shared<std::string>(std::move(pHandleMsg));
    dirtyFlag_[13] = true;
}
void XxlJobLog::setHandleMsgToNull() noexcept
{
    handleMsg_.reset();
    dirtyFlag_[13] = true;
}

const int8_t &XxlJobLog::getValueOfAlarmStatus() const noexcept
{
    static const int8_t defaultValue = int8_t();
    if(alarmStatus_)
        return *alarmStatus_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &XxlJobLog::getAlarmStatus() const noexcept
{
    return alarmStatus_;
}
void XxlJobLog::setAlarmStatus(const int8_t &pAlarmStatus) noexcept
{
    alarmStatus_ = std::make_shared<int8_t>(pAlarmStatus);
    dirtyFlag_[14] = true;
}

void XxlJobLog::updateId(const uint64_t id)
{
    id_ = std::make_shared<int64_t>(static_cast<int64_t>(id));
}

const std::vector<std::string> &XxlJobLog::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "job_group",
        "job_id",
        "executor_address",
        "executor_handler",
        "executor_param",
        "executor_sharding_param",
        "executor_fail_retry_count",
        "trigger_time",
        "trigger_code",
        "trigger_msg",
        "handle_time",
        "handle_code",
        "handle_msg",
        "alarm_status"
    };
    return inCols;
}

void XxlJobLog::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getJobGroup())
        {
            binder << getValueOfJobGroup();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getJobId())
        {
            binder << getValueOfJobId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getExecutorAddress())
        {
            binder << getValueOfExecutorAddress();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getExecutorHandler())
        {
            binder << getValueOfExecutorHandler();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getExecutorParam())
        {
            binder << getValueOfExecutorParam();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getExecutorShardingParam())
        {
            binder << getValueOfExecutorShardingParam();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getExecutorFailRetryCount())
        {
            binder << getValueOfExecutorFailRetryCount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getTriggerTime())
        {
            binder << getValueOfTriggerTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getTriggerCode())
        {
            binder << getValueOfTriggerCode();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getTriggerMsg())
        {
            binder << getValueOfTriggerMsg();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getHandleTime())
        {
            binder << getValueOfHandleTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getHandleCode())
        {
            binder << getValueOfHandleCode();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getHandleMsg())
        {
            binder << getValueOfHandleMsg();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getAlarmStatus())
        {
            binder << getValueOfAlarmStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> XxlJobLog::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    if(dirtyFlag_[12])
    {
        ret.push_back(getColumnName(12));
    }
    if(dirtyFlag_[13])
    {
        ret.push_back(getColumnName(13));
    }
    if(dirtyFlag_[14])
    {
        ret.push_back(getColumnName(14));
    }
    return ret;
}

void XxlJobLog::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getJobGroup())
        {
            binder << getValueOfJobGroup();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getJobId())
        {
            binder << getValueOfJobId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getExecutorAddress())
        {
            binder << getValueOfExecutorAddress();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getExecutorHandler())
        {
            binder << getValueOfExecutorHandler();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getExecutorParam())
        {
            binder << getValueOfExecutorParam();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getExecutorShardingParam())
        {
            binder << getValueOfExecutorShardingParam();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getExecutorFailRetryCount())
        {
            binder << getValueOfExecutorFailRetryCount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getTriggerTime())
        {
            binder << getValueOfTriggerTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getTriggerCode())
        {
            binder << getValueOfTriggerCode();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getTriggerMsg())
        {
            binder << getValueOfTriggerMsg();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getHandleTime())
        {
            binder << getValueOfHandleTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getHandleCode())
        {
            binder << getValueOfHandleCode();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getHandleMsg())
        {
            binder << getValueOfHandleMsg();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getAlarmStatus())
        {
            binder << getValueOfAlarmStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value XxlJobLog::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::Int64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getJobGroup())
    {
        ret["job_group"]=getValueOfJobGroup();
    }
    else
    {
        ret["job_group"]=Json::Value();
    }
    if(getJobId())
    {
        ret["job_id"]=getValueOfJobId();
    }
    else
    {
        ret["job_id"]=Json::Value();
    }
    if(getExecutorAddress())
    {
        ret["executor_address"]=getValueOfExecutorAddress();
    }
    else
    {
        ret["executor_address"]=Json::Value();
    }
    if(getExecutorHandler())
    {
        ret["executor_handler"]=getValueOfExecutorHandler();
    }
    else
    {
        ret["executor_handler"]=Json::Value();
    }
    if(getExecutorParam())
    {
        ret["executor_param"]=getValueOfExecutorParam();
    }
    else
    {
        ret["executor_param"]=Json::Value();
    }
    if(getExecutorShardingParam())
    {
        ret["executor_sharding_param"]=getValueOfExecutorShardingParam();
    }
    else
    {
        ret["executor_sharding_param"]=Json::Value();
    }
    if(getExecutorFailRetryCount())
    {
        ret["executor_fail_retry_count"]=getValueOfExecutorFailRetryCount();
    }
    else
    {
        ret["executor_fail_retry_count"]=Json::Value();
    }
    if(getTriggerTime())
    {
        ret["trigger_time"]=getTriggerTime()->toDbStringLocal();
    }
    else
    {
        ret["trigger_time"]=Json::Value();
    }
    if(getTriggerCode())
    {
        ret["trigger_code"]=getValueOfTriggerCode();
    }
    else
    {
        ret["trigger_code"]=Json::Value();
    }
    if(getTriggerMsg())
    {
        ret["trigger_msg"]=getValueOfTriggerMsg();
    }
    else
    {
        ret["trigger_msg"]=Json::Value();
    }
    if(getHandleTime())
    {
        ret["handle_time"]=getHandleTime()->toDbStringLocal();
    }
    else
    {
        ret["handle_time"]=Json::Value();
    }
    if(getHandleCode())
    {
        ret["handle_code"]=getValueOfHandleCode();
    }
    else
    {
        ret["handle_code"]=Json::Value();
    }
    if(getHandleMsg())
    {
        ret["handle_msg"]=getValueOfHandleMsg();
    }
    else
    {
        ret["handle_msg"]=Json::Value();
    }
    if(getAlarmStatus())
    {
        ret["alarm_status"]=getValueOfAlarmStatus();
    }
    else
    {
        ret["alarm_status"]=Json::Value();
    }
    return ret;
}

Json::Value XxlJobLog::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 15)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::Int64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getJobGroup())
            {
                ret[pMasqueradingVector[1]]=getValueOfJobGroup();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getJobId())
            {
                ret[pMasqueradingVector[2]]=getValueOfJobId();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getExecutorAddress())
            {
                ret[pMasqueradingVector[3]]=getValueOfExecutorAddress();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getExecutorHandler())
            {
                ret[pMasqueradingVector[4]]=getValueOfExecutorHandler();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getExecutorParam())
            {
                ret[pMasqueradingVector[5]]=getValueOfExecutorParam();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getExecutorShardingParam())
            {
                ret[pMasqueradingVector[6]]=getValueOfExecutorShardingParam();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getExecutorFailRetryCount())
            {
                ret[pMasqueradingVector[7]]=getValueOfExecutorFailRetryCount();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getTriggerTime())
            {
                ret[pMasqueradingVector[8]]=getTriggerTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getTriggerCode())
            {
                ret[pMasqueradingVector[9]]=getValueOfTriggerCode();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getTriggerMsg())
            {
                ret[pMasqueradingVector[10]]=getValueOfTriggerMsg();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getHandleTime())
            {
                ret[pMasqueradingVector[11]]=getHandleTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getHandleCode())
            {
                ret[pMasqueradingVector[12]]=getValueOfHandleCode();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[13].empty())
        {
            if(getHandleMsg())
            {
                ret[pMasqueradingVector[13]]=getValueOfHandleMsg();
            }
            else
            {
                ret[pMasqueradingVector[13]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[14].empty())
        {
            if(getAlarmStatus())
            {
                ret[pMasqueradingVector[14]]=getValueOfAlarmStatus();
            }
            else
            {
                ret[pMasqueradingVector[14]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::Int64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getJobGroup())
    {
        ret["job_group"]=getValueOfJobGroup();
    }
    else
    {
        ret["job_group"]=Json::Value();
    }
    if(getJobId())
    {
        ret["job_id"]=getValueOfJobId();
    }
    else
    {
        ret["job_id"]=Json::Value();
    }
    if(getExecutorAddress())
    {
        ret["executor_address"]=getValueOfExecutorAddress();
    }
    else
    {
        ret["executor_address"]=Json::Value();
    }
    if(getExecutorHandler())
    {
        ret["executor_handler"]=getValueOfExecutorHandler();
    }
    else
    {
        ret["executor_handler"]=Json::Value();
    }
    if(getExecutorParam())
    {
        ret["executor_param"]=getValueOfExecutorParam();
    }
    else
    {
        ret["executor_param"]=Json::Value();
    }
    if(getExecutorShardingParam())
    {
        ret["executor_sharding_param"]=getValueOfExecutorShardingParam();
    }
    else
    {
        ret["executor_sharding_param"]=Json::Value();
    }
    if(getExecutorFailRetryCount())
    {
        ret["executor_fail_retry_count"]=getValueOfExecutorFailRetryCount();
    }
    else
    {
        ret["executor_fail_retry_count"]=Json::Value();
    }
    if(getTriggerTime())
    {
        ret["trigger_time"]=getTriggerTime()->toDbStringLocal();
    }
    else
    {
        ret["trigger_time"]=Json::Value();
    }
    if(getTriggerCode())
    {
        ret["trigger_code"]=getValueOfTriggerCode();
    }
    else
    {
        ret["trigger_code"]=Json::Value();
    }
    if(getTriggerMsg())
    {
        ret["trigger_msg"]=getValueOfTriggerMsg();
    }
    else
    {
        ret["trigger_msg"]=Json::Value();
    }
    if(getHandleTime())
    {
        ret["handle_time"]=getHandleTime()->toDbStringLocal();
    }
    else
    {
        ret["handle_time"]=Json::Value();
    }
    if(getHandleCode())
    {
        ret["handle_code"]=getValueOfHandleCode();
    }
    else
    {
        ret["handle_code"]=Json::Value();
    }
    if(getHandleMsg())
    {
        ret["handle_msg"]=getValueOfHandleMsg();
    }
    else
    {
        ret["handle_msg"]=Json::Value();
    }
    if(getAlarmStatus())
    {
        ret["alarm_status"]=getValueOfAlarmStatus();
    }
    else
    {
        ret["alarm_status"]=Json::Value();
    }
    return ret;
}

bool XxlJobLog::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("job_group"))
    {
        if(!validJsonOfField(1, "job_group", pJson["job_group"], err, true))
            return false;
    }
    else
    {
        err="The job_group column cannot be null";
        return false;
    }
    if(pJson.isMember("job_id"))
    {
        if(!validJsonOfField(2, "job_id", pJson["job_id"], err, true))
            return false;
    }
    else
    {
        err="The job_id column cannot be null";
        return false;
    }
    if(pJson.isMember("executor_address"))
    {
        if(!validJsonOfField(3, "executor_address", pJson["executor_address"], err, true))
            return false;
    }
    if(pJson.isMember("executor_handler"))
    {
        if(!validJsonOfField(4, "executor_handler", pJson["executor_handler"], err, true))
            return false;
    }
    if(pJson.isMember("executor_param"))
    {
        if(!validJsonOfField(5, "executor_param", pJson["executor_param"], err, true))
            return false;
    }
    if(pJson.isMember("executor_sharding_param"))
    {
        if(!validJsonOfField(6, "executor_sharding_param", pJson["executor_sharding_param"], err, true))
            return false;
    }
    if(pJson.isMember("executor_fail_retry_count"))
    {
        if(!validJsonOfField(7, "executor_fail_retry_count", pJson["executor_fail_retry_count"], err, true))
            return false;
    }
    if(pJson.isMember("trigger_time"))
    {
        if(!validJsonOfField(8, "trigger_time", pJson["trigger_time"], err, true))
            return false;
    }
    if(pJson.isMember("trigger_code"))
    {
        if(!validJsonOfField(9, "trigger_code", pJson["trigger_code"], err, true))
            return false;
    }
    else
    {
        err="The trigger_code column cannot be null";
        return false;
    }
    if(pJson.isMember("trigger_msg"))
    {
        if(!validJsonOfField(10, "trigger_msg", pJson["trigger_msg"], err, true))
            return false;
    }
    if(pJson.isMember("handle_time"))
    {
        if(!validJsonOfField(11, "handle_time", pJson["handle_time"], err, true))
            return false;
    }
    if(pJson.isMember("handle_code"))
    {
        if(!validJsonOfField(12, "handle_code", pJson["handle_code"], err, true))
            return false;
    }
    else
    {
        err="The handle_code column cannot be null";
        return false;
    }
    if(pJson.isMember("handle_msg"))
    {
        if(!validJsonOfField(13, "handle_msg", pJson["handle_msg"], err, true))
            return false;
    }
    if(pJson.isMember("alarm_status"))
    {
        if(!validJsonOfField(14, "alarm_status", pJson["alarm_status"], err, true))
            return false;
    }
    return true;
}
bool XxlJobLog::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                   const std::vector<std::string> &pMasqueradingVector,
                                                   std::string &err)
{
    if(pMasqueradingVector.size() != 15)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[9].empty())
      {
          if(pJson.isMember(pMasqueradingVector[9]))
          {
              if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[9] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[10].empty())
      {
          if(pJson.isMember(pMasqueradingVector[10]))
          {
              if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[11].empty())
      {
          if(pJson.isMember(pMasqueradingVector[11]))
          {
              if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[12].empty())
      {
          if(pJson.isMember(pMasqueradingVector[12]))
          {
              if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[12] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[13].empty())
      {
          if(pJson.isMember(pMasqueradingVector[13]))
          {
              if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[14].empty())
      {
          if(pJson.isMember(pMasqueradingVector[14]))
          {
              if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool XxlJobLog::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("job_group"))
    {
        if(!validJsonOfField(1, "job_group", pJson["job_group"], err, false))
            return false;
    }
    if(pJson.isMember("job_id"))
    {
        if(!validJsonOfField(2, "job_id", pJson["job_id"], err, false))
            return false;
    }
    if(pJson.isMember("executor_address"))
    {
        if(!validJsonOfField(3, "executor_address", pJson["executor_address"], err, false))
            return false;
    }
    if(pJson.isMember("executor_handler"))
    {
        if(!validJsonOfField(4, "executor_handler", pJson["executor_handler"], err, false))
            return false;
    }
    if(pJson.isMember("executor_param"))
    {
        if(!validJsonOfField(5, "executor_param", pJson["executor_param"], err, false))
            return false;
    }
    if(pJson.isMember("executor_sharding_param"))
    {
        if(!validJsonOfField(6, "executor_sharding_param", pJson["executor_sharding_param"], err, false))
            return false;
    }
    if(pJson.isMember("executor_fail_retry_count"))
    {
        if(!validJsonOfField(7, "executor_fail_retry_count", pJson["executor_fail_retry_count"], err, false))
            return false;
    }
    if(pJson.isMember("trigger_time"))
    {
        if(!validJsonOfField(8, "trigger_time", pJson["trigger_time"], err, false))
            return false;
    }
    if(pJson.isMember("trigger_code"))
    {
        if(!validJsonOfField(9, "trigger_code", pJson["trigger_code"], err, false))
            return false;
    }
    if(pJson.isMember("trigger_msg"))
    {
        if(!validJsonOfField(10, "trigger_msg", pJson["trigger_msg"], err, false))
            return false;
    }
    if(pJson.isMember("handle_time"))
    {
        if(!validJsonOfField(11, "handle_time", pJson["handle_time"], err, false))
            return false;
    }
    if(pJson.isMember("handle_code"))
    {
        if(!validJsonOfField(12, "handle_code", pJson["handle_code"], err, false))
            return false;
    }
    if(pJson.isMember("handle_msg"))
    {
        if(!validJsonOfField(13, "handle_msg", pJson["handle_msg"], err, false))
            return false;
    }
    if(pJson.isMember("alarm_status"))
    {
        if(!validJsonOfField(14, "alarm_status", pJson["alarm_status"], err, false))
            return false;
    }
    return true;
}
bool XxlJobLog::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                 const std::vector<std::string> &pMasqueradingVector,
                                                 std::string &err)
{
    if(pMasqueradingVector.size() != 15)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
      if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
      {
          if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
              return false;
      }
      if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
      {
          if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
              return false;
      }
      if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
      {
          if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
              return false;
      }
      if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
      {
          if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
              return false;
      }
      if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
      {
          if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, false))
              return false;
      }
      if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
      {
          if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool XxlJobLog::validJsonOfField(size_t index,
                                 const std::string &fieldName,
                                 const Json::Value &pJson,
                                 std::string &err,
                                 bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 512)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 512)";
                return false;
            }

            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 20)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 20)";
                return false;
            }

            break;
        case 7:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 9:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 10:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 11:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 12:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 13:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 14:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
