/**
 *
 *  XxlJobInfo.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "XxlJobInfo.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::xxl_job;

const std::string XxlJobInfo::Cols::_id = "id";
const std::string XxlJobInfo::Cols::_job_group = "job_group";
const std::string XxlJobInfo::Cols::_job_desc = "job_desc";
const std::string XxlJobInfo::Cols::_add_time = "add_time";
const std::string XxlJobInfo::Cols::_update_time = "update_time";
const std::string XxlJobInfo::Cols::_author = "author";
const std::string XxlJobInfo::Cols::_alarm_email = "alarm_email";
const std::string XxlJobInfo::Cols::_schedule_type = "schedule_type";
const std::string XxlJobInfo::Cols::_schedule_conf = "schedule_conf";
const std::string XxlJobInfo::Cols::_misfire_strategy = "misfire_strategy";
const std::string XxlJobInfo::Cols::_executor_route_strategy = "executor_route_strategy";
const std::string XxlJobInfo::Cols::_executor_handler = "executor_handler";
const std::string XxlJobInfo::Cols::_executor_param = "executor_param";
const std::string XxlJobInfo::Cols::_executor_block_strategy = "executor_block_strategy";
const std::string XxlJobInfo::Cols::_executor_timeout = "executor_timeout";
const std::string XxlJobInfo::Cols::_executor_fail_retry_count = "executor_fail_retry_count";
const std::string XxlJobInfo::Cols::_glue_type = "glue_type";
const std::string XxlJobInfo::Cols::_glue_source = "glue_source";
const std::string XxlJobInfo::Cols::_glue_remark = "glue_remark";
const std::string XxlJobInfo::Cols::_glue_updatetime = "glue_updatetime";
const std::string XxlJobInfo::Cols::_child_jobid = "child_jobid";
const std::string XxlJobInfo::Cols::_trigger_status = "trigger_status";
const std::string XxlJobInfo::Cols::_trigger_last_time = "trigger_last_time";
const std::string XxlJobInfo::Cols::_trigger_next_time = "trigger_next_time";
const std::string XxlJobInfo::primaryKeyName = "id";
const bool XxlJobInfo::hasPrimaryKey = true;
const std::string XxlJobInfo::tableName = "xxl_job_info";

const std::vector<typename XxlJobInfo::MetaData> XxlJobInfo::metaData_={
{"id","int32_t","int(11)",4,1,1,1},
{"job_group","int32_t","int(11)",4,0,0,1},
{"job_desc","std::string","varchar(255)",255,0,0,1},
{"add_time","::trantor::Date","datetime",0,0,0,0},
{"update_time","::trantor::Date","datetime",0,0,0,0},
{"author","std::string","varchar(64)",64,0,0,0},
{"alarm_email","std::string","varchar(255)",255,0,0,0},
{"schedule_type","std::string","varchar(50)",50,0,0,1},
{"schedule_conf","std::string","varchar(128)",128,0,0,0},
{"misfire_strategy","std::string","varchar(50)",50,0,0,1},
{"executor_route_strategy","std::string","varchar(50)",50,0,0,0},
{"executor_handler","std::string","varchar(255)",255,0,0,0},
{"executor_param","std::string","varchar(512)",512,0,0,0},
{"executor_block_strategy","std::string","varchar(50)",50,0,0,0},
{"executor_timeout","int32_t","int(11)",4,0,0,1},
{"executor_fail_retry_count","int32_t","int(11)",4,0,0,1},
{"glue_type","std::string","varchar(50)",50,0,0,1},
{"glue_source","std::string","mediumtext",0,0,0,0},
{"glue_remark","std::string","varchar(128)",128,0,0,0},
{"glue_updatetime","::trantor::Date","datetime",0,0,0,0},
{"child_jobid","std::string","varchar(255)",255,0,0,0},
{"trigger_status","int8_t","tinyint(4)",1,0,0,1},
{"trigger_last_time","int64_t","bigint(13)",8,0,0,1},
{"trigger_next_time","int64_t","bigint(13)",8,0,0,1}
};
const std::string &XxlJobInfo::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
XxlJobInfo::XxlJobInfo(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["job_group"].isNull())
        {
            jobGroup_=std::make_shared<int32_t>(r["job_group"].as<int32_t>());
        }
        if(!r["job_desc"].isNull())
        {
            jobDesc_=std::make_shared<std::string>(r["job_desc"].as<std::string>());
        }
        if(!r["add_time"].isNull())
        {
            auto timeStr = r["add_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                addTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["update_time"].isNull())
        {
            auto timeStr = r["update_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["author"].isNull())
        {
            author_=std::make_shared<std::string>(r["author"].as<std::string>());
        }
        if(!r["alarm_email"].isNull())
        {
            alarmEmail_=std::make_shared<std::string>(r["alarm_email"].as<std::string>());
        }
        if(!r["schedule_type"].isNull())
        {
            scheduleType_=std::make_shared<std::string>(r["schedule_type"].as<std::string>());
        }
        if(!r["schedule_conf"].isNull())
        {
            scheduleConf_=std::make_shared<std::string>(r["schedule_conf"].as<std::string>());
        }
        if(!r["misfire_strategy"].isNull())
        {
            misfireStrategy_=std::make_shared<std::string>(r["misfire_strategy"].as<std::string>());
        }
        if(!r["executor_route_strategy"].isNull())
        {
            executorRouteStrategy_=std::make_shared<std::string>(r["executor_route_strategy"].as<std::string>());
        }
        if(!r["executor_handler"].isNull())
        {
            executorHandler_=std::make_shared<std::string>(r["executor_handler"].as<std::string>());
        }
        if(!r["executor_param"].isNull())
        {
            executorParam_=std::make_shared<std::string>(r["executor_param"].as<std::string>());
        }
        if(!r["executor_block_strategy"].isNull())
        {
            executorBlockStrategy_=std::make_shared<std::string>(r["executor_block_strategy"].as<std::string>());
        }
        if(!r["executor_timeout"].isNull())
        {
            executorTimeout_=std::make_shared<int32_t>(r["executor_timeout"].as<int32_t>());
        }
        if(!r["executor_fail_retry_count"].isNull())
        {
            executorFailRetryCount_=std::make_shared<int32_t>(r["executor_fail_retry_count"].as<int32_t>());
        }
        if(!r["glue_type"].isNull())
        {
            glueType_=std::make_shared<std::string>(r["glue_type"].as<std::string>());
        }
        if(!r["glue_source"].isNull())
        {
            glueSource_=std::make_shared<std::string>(r["glue_source"].as<std::string>());
        }
        if(!r["glue_remark"].isNull())
        {
            glueRemark_=std::make_shared<std::string>(r["glue_remark"].as<std::string>());
        }
        if(!r["glue_updatetime"].isNull())
        {
            auto timeStr = r["glue_updatetime"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                glueUpdatetime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["child_jobid"].isNull())
        {
            childJobid_=std::make_shared<std::string>(r["child_jobid"].as<std::string>());
        }
        if(!r["trigger_status"].isNull())
        {
            triggerStatus_=std::make_shared<int8_t>(r["trigger_status"].as<int8_t>());
        }
        if(!r["trigger_last_time"].isNull())
        {
            triggerLastTime_=std::make_shared<int64_t>(r["trigger_last_time"].as<int64_t>());
        }
        if(!r["trigger_next_time"].isNull())
        {
            triggerNextTime_=std::make_shared<int64_t>(r["trigger_next_time"].as<int64_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 24 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            jobGroup_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            jobDesc_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                addTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            author_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            alarmEmail_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            scheduleType_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            scheduleConf_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            misfireStrategy_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            executorRouteStrategy_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            executorHandler_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            executorParam_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 13;
        if(!r[index].isNull())
        {
            executorBlockStrategy_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 14;
        if(!r[index].isNull())
        {
            executorTimeout_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 15;
        if(!r[index].isNull())
        {
            executorFailRetryCount_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 16;
        if(!r[index].isNull())
        {
            glueType_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 17;
        if(!r[index].isNull())
        {
            glueSource_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 18;
        if(!r[index].isNull())
        {
            glueRemark_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 19;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                glueUpdatetime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 20;
        if(!r[index].isNull())
        {
            childJobid_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 21;
        if(!r[index].isNull())
        {
            triggerStatus_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 22;
        if(!r[index].isNull())
        {
            triggerLastTime_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 23;
        if(!r[index].isNull())
        {
            triggerNextTime_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
    }

}

XxlJobInfo::XxlJobInfo(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 24)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            jobGroup_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            jobDesc_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[3]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                addTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[4]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            author_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            alarmEmail_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            scheduleType_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            scheduleConf_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            misfireStrategy_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            executorRouteStrategy_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            executorHandler_=std::make_shared<std::string>(pJson[pMasqueradingVector[11]].asString());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            executorParam_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            executorBlockStrategy_=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            executorTimeout_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[14]].asInt64());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            executorFailRetryCount_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[15]].asInt64());
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            glueType_=std::make_shared<std::string>(pJson[pMasqueradingVector[16]].asString());
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        dirtyFlag_[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            glueSource_=std::make_shared<std::string>(pJson[pMasqueradingVector[17]].asString());
        }
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        dirtyFlag_[18] = true;
        if(!pJson[pMasqueradingVector[18]].isNull())
        {
            glueRemark_=std::make_shared<std::string>(pJson[pMasqueradingVector[18]].asString());
        }
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        dirtyFlag_[19] = true;
        if(!pJson[pMasqueradingVector[19]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[19]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                glueUpdatetime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
    {
        dirtyFlag_[20] = true;
        if(!pJson[pMasqueradingVector[20]].isNull())
        {
            childJobid_=std::make_shared<std::string>(pJson[pMasqueradingVector[20]].asString());
        }
    }
    if(!pMasqueradingVector[21].empty() && pJson.isMember(pMasqueradingVector[21]))
    {
        dirtyFlag_[21] = true;
        if(!pJson[pMasqueradingVector[21]].isNull())
        {
            triggerStatus_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[21]].asInt64());
        }
    }
    if(!pMasqueradingVector[22].empty() && pJson.isMember(pMasqueradingVector[22]))
    {
        dirtyFlag_[22] = true;
        if(!pJson[pMasqueradingVector[22]].isNull())
        {
            triggerLastTime_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[22]].asInt64());
        }
    }
    if(!pMasqueradingVector[23].empty() && pJson.isMember(pMasqueradingVector[23]))
    {
        dirtyFlag_[23] = true;
        if(!pJson[pMasqueradingVector[23]].isNull())
        {
            triggerNextTime_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[23]].asInt64());
        }
    }
}

XxlJobInfo::XxlJobInfo(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("job_group"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["job_group"].isNull())
        {
            jobGroup_=std::make_shared<int32_t>((int32_t)pJson["job_group"].asInt64());
        }
    }
    if(pJson.isMember("job_desc"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["job_desc"].isNull())
        {
            jobDesc_=std::make_shared<std::string>(pJson["job_desc"].asString());
        }
    }
    if(pJson.isMember("add_time"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["add_time"].isNull())
        {
            auto timeStr = pJson["add_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                addTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("update_time"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["update_time"].isNull())
        {
            auto timeStr = pJson["update_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("author"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["author"].isNull())
        {
            author_=std::make_shared<std::string>(pJson["author"].asString());
        }
    }
    if(pJson.isMember("alarm_email"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["alarm_email"].isNull())
        {
            alarmEmail_=std::make_shared<std::string>(pJson["alarm_email"].asString());
        }
    }
    if(pJson.isMember("schedule_type"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["schedule_type"].isNull())
        {
            scheduleType_=std::make_shared<std::string>(pJson["schedule_type"].asString());
        }
    }
    if(pJson.isMember("schedule_conf"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["schedule_conf"].isNull())
        {
            scheduleConf_=std::make_shared<std::string>(pJson["schedule_conf"].asString());
        }
    }
    if(pJson.isMember("misfire_strategy"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["misfire_strategy"].isNull())
        {
            misfireStrategy_=std::make_shared<std::string>(pJson["misfire_strategy"].asString());
        }
    }
    if(pJson.isMember("executor_route_strategy"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["executor_route_strategy"].isNull())
        {
            executorRouteStrategy_=std::make_shared<std::string>(pJson["executor_route_strategy"].asString());
        }
    }
    if(pJson.isMember("executor_handler"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["executor_handler"].isNull())
        {
            executorHandler_=std::make_shared<std::string>(pJson["executor_handler"].asString());
        }
    }
    if(pJson.isMember("executor_param"))
    {
        dirtyFlag_[12]=true;
        if(!pJson["executor_param"].isNull())
        {
            executorParam_=std::make_shared<std::string>(pJson["executor_param"].asString());
        }
    }
    if(pJson.isMember("executor_block_strategy"))
    {
        dirtyFlag_[13]=true;
        if(!pJson["executor_block_strategy"].isNull())
        {
            executorBlockStrategy_=std::make_shared<std::string>(pJson["executor_block_strategy"].asString());
        }
    }
    if(pJson.isMember("executor_timeout"))
    {
        dirtyFlag_[14]=true;
        if(!pJson["executor_timeout"].isNull())
        {
            executorTimeout_=std::make_shared<int32_t>((int32_t)pJson["executor_timeout"].asInt64());
        }
    }
    if(pJson.isMember("executor_fail_retry_count"))
    {
        dirtyFlag_[15]=true;
        if(!pJson["executor_fail_retry_count"].isNull())
        {
            executorFailRetryCount_=std::make_shared<int32_t>((int32_t)pJson["executor_fail_retry_count"].asInt64());
        }
    }
    if(pJson.isMember("glue_type"))
    {
        dirtyFlag_[16]=true;
        if(!pJson["glue_type"].isNull())
        {
            glueType_=std::make_shared<std::string>(pJson["glue_type"].asString());
        }
    }
    if(pJson.isMember("glue_source"))
    {
        dirtyFlag_[17]=true;
        if(!pJson["glue_source"].isNull())
        {
            glueSource_=std::make_shared<std::string>(pJson["glue_source"].asString());
        }
    }
    if(pJson.isMember("glue_remark"))
    {
        dirtyFlag_[18]=true;
        if(!pJson["glue_remark"].isNull())
        {
            glueRemark_=std::make_shared<std::string>(pJson["glue_remark"].asString());
        }
    }
    if(pJson.isMember("glue_updatetime"))
    {
        dirtyFlag_[19]=true;
        if(!pJson["glue_updatetime"].isNull())
        {
            auto timeStr = pJson["glue_updatetime"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                glueUpdatetime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("child_jobid"))
    {
        dirtyFlag_[20]=true;
        if(!pJson["child_jobid"].isNull())
        {
            childJobid_=std::make_shared<std::string>(pJson["child_jobid"].asString());
        }
    }
    if(pJson.isMember("trigger_status"))
    {
        dirtyFlag_[21]=true;
        if(!pJson["trigger_status"].isNull())
        {
            triggerStatus_=std::make_shared<int8_t>((int8_t)pJson["trigger_status"].asInt64());
        }
    }
    if(pJson.isMember("trigger_last_time"))
    {
        dirtyFlag_[22]=true;
        if(!pJson["trigger_last_time"].isNull())
        {
            triggerLastTime_=std::make_shared<int64_t>((int64_t)pJson["trigger_last_time"].asInt64());
        }
    }
    if(pJson.isMember("trigger_next_time"))
    {
        dirtyFlag_[23]=true;
        if(!pJson["trigger_next_time"].isNull())
        {
            triggerNextTime_=std::make_shared<int64_t>((int64_t)pJson["trigger_next_time"].asInt64());
        }
    }
}

void XxlJobInfo::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 24)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            jobGroup_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            jobDesc_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[3]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                addTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[4]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            author_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            alarmEmail_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            scheduleType_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            scheduleConf_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            misfireStrategy_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            executorRouteStrategy_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            executorHandler_=std::make_shared<std::string>(pJson[pMasqueradingVector[11]].asString());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            executorParam_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            executorBlockStrategy_=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            executorTimeout_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[14]].asInt64());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            executorFailRetryCount_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[15]].asInt64());
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            glueType_=std::make_shared<std::string>(pJson[pMasqueradingVector[16]].asString());
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        dirtyFlag_[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            glueSource_=std::make_shared<std::string>(pJson[pMasqueradingVector[17]].asString());
        }
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        dirtyFlag_[18] = true;
        if(!pJson[pMasqueradingVector[18]].isNull())
        {
            glueRemark_=std::make_shared<std::string>(pJson[pMasqueradingVector[18]].asString());
        }
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        dirtyFlag_[19] = true;
        if(!pJson[pMasqueradingVector[19]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[19]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                glueUpdatetime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
    {
        dirtyFlag_[20] = true;
        if(!pJson[pMasqueradingVector[20]].isNull())
        {
            childJobid_=std::make_shared<std::string>(pJson[pMasqueradingVector[20]].asString());
        }
    }
    if(!pMasqueradingVector[21].empty() && pJson.isMember(pMasqueradingVector[21]))
    {
        dirtyFlag_[21] = true;
        if(!pJson[pMasqueradingVector[21]].isNull())
        {
            triggerStatus_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[21]].asInt64());
        }
    }
    if(!pMasqueradingVector[22].empty() && pJson.isMember(pMasqueradingVector[22]))
    {
        dirtyFlag_[22] = true;
        if(!pJson[pMasqueradingVector[22]].isNull())
        {
            triggerLastTime_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[22]].asInt64());
        }
    }
    if(!pMasqueradingVector[23].empty() && pJson.isMember(pMasqueradingVector[23]))
    {
        dirtyFlag_[23] = true;
        if(!pJson[pMasqueradingVector[23]].isNull())
        {
            triggerNextTime_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[23]].asInt64());
        }
    }
}

void XxlJobInfo::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("job_group"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["job_group"].isNull())
        {
            jobGroup_=std::make_shared<int32_t>((int32_t)pJson["job_group"].asInt64());
        }
    }
    if(pJson.isMember("job_desc"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["job_desc"].isNull())
        {
            jobDesc_=std::make_shared<std::string>(pJson["job_desc"].asString());
        }
    }
    if(pJson.isMember("add_time"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["add_time"].isNull())
        {
            auto timeStr = pJson["add_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                addTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("update_time"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["update_time"].isNull())
        {
            auto timeStr = pJson["update_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("author"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["author"].isNull())
        {
            author_=std::make_shared<std::string>(pJson["author"].asString());
        }
    }
    if(pJson.isMember("alarm_email"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["alarm_email"].isNull())
        {
            alarmEmail_=std::make_shared<std::string>(pJson["alarm_email"].asString());
        }
    }
    if(pJson.isMember("schedule_type"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["schedule_type"].isNull())
        {
            scheduleType_=std::make_shared<std::string>(pJson["schedule_type"].asString());
        }
    }
    if(pJson.isMember("schedule_conf"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["schedule_conf"].isNull())
        {
            scheduleConf_=std::make_shared<std::string>(pJson["schedule_conf"].asString());
        }
    }
    if(pJson.isMember("misfire_strategy"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["misfire_strategy"].isNull())
        {
            misfireStrategy_=std::make_shared<std::string>(pJson["misfire_strategy"].asString());
        }
    }
    if(pJson.isMember("executor_route_strategy"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["executor_route_strategy"].isNull())
        {
            executorRouteStrategy_=std::make_shared<std::string>(pJson["executor_route_strategy"].asString());
        }
    }
    if(pJson.isMember("executor_handler"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["executor_handler"].isNull())
        {
            executorHandler_=std::make_shared<std::string>(pJson["executor_handler"].asString());
        }
    }
    if(pJson.isMember("executor_param"))
    {
        dirtyFlag_[12] = true;
        if(!pJson["executor_param"].isNull())
        {
            executorParam_=std::make_shared<std::string>(pJson["executor_param"].asString());
        }
    }
    if(pJson.isMember("executor_block_strategy"))
    {
        dirtyFlag_[13] = true;
        if(!pJson["executor_block_strategy"].isNull())
        {
            executorBlockStrategy_=std::make_shared<std::string>(pJson["executor_block_strategy"].asString());
        }
    }
    if(pJson.isMember("executor_timeout"))
    {
        dirtyFlag_[14] = true;
        if(!pJson["executor_timeout"].isNull())
        {
            executorTimeout_=std::make_shared<int32_t>((int32_t)pJson["executor_timeout"].asInt64());
        }
    }
    if(pJson.isMember("executor_fail_retry_count"))
    {
        dirtyFlag_[15] = true;
        if(!pJson["executor_fail_retry_count"].isNull())
        {
            executorFailRetryCount_=std::make_shared<int32_t>((int32_t)pJson["executor_fail_retry_count"].asInt64());
        }
    }
    if(pJson.isMember("glue_type"))
    {
        dirtyFlag_[16] = true;
        if(!pJson["glue_type"].isNull())
        {
            glueType_=std::make_shared<std::string>(pJson["glue_type"].asString());
        }
    }
    if(pJson.isMember("glue_source"))
    {
        dirtyFlag_[17] = true;
        if(!pJson["glue_source"].isNull())
        {
            glueSource_=std::make_shared<std::string>(pJson["glue_source"].asString());
        }
    }
    if(pJson.isMember("glue_remark"))
    {
        dirtyFlag_[18] = true;
        if(!pJson["glue_remark"].isNull())
        {
            glueRemark_=std::make_shared<std::string>(pJson["glue_remark"].asString());
        }
    }
    if(pJson.isMember("glue_updatetime"))
    {
        dirtyFlag_[19] = true;
        if(!pJson["glue_updatetime"].isNull())
        {
            auto timeStr = pJson["glue_updatetime"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                glueUpdatetime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("child_jobid"))
    {
        dirtyFlag_[20] = true;
        if(!pJson["child_jobid"].isNull())
        {
            childJobid_=std::make_shared<std::string>(pJson["child_jobid"].asString());
        }
    }
    if(pJson.isMember("trigger_status"))
    {
        dirtyFlag_[21] = true;
        if(!pJson["trigger_status"].isNull())
        {
            triggerStatus_=std::make_shared<int8_t>((int8_t)pJson["trigger_status"].asInt64());
        }
    }
    if(pJson.isMember("trigger_last_time"))
    {
        dirtyFlag_[22] = true;
        if(!pJson["trigger_last_time"].isNull())
        {
            triggerLastTime_=std::make_shared<int64_t>((int64_t)pJson["trigger_last_time"].asInt64());
        }
    }
    if(pJson.isMember("trigger_next_time"))
    {
        dirtyFlag_[23] = true;
        if(!pJson["trigger_next_time"].isNull())
        {
            triggerNextTime_=std::make_shared<int64_t>((int64_t)pJson["trigger_next_time"].asInt64());
        }
    }
}

const int32_t &XxlJobInfo::getValueOfId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &XxlJobInfo::getId() const noexcept
{
    return id_;
}
void XxlJobInfo::setId(const int32_t &pId) noexcept
{
    id_ = std::make_shared<int32_t>(pId);
    dirtyFlag_[0] = true;
}
const typename XxlJobInfo::PrimaryKeyType & XxlJobInfo::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const int32_t &XxlJobInfo::getValueOfJobGroup() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(jobGroup_)
        return *jobGroup_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &XxlJobInfo::getJobGroup() const noexcept
{
    return jobGroup_;
}
void XxlJobInfo::setJobGroup(const int32_t &pJobGroup) noexcept
{
    jobGroup_ = std::make_shared<int32_t>(pJobGroup);
    dirtyFlag_[1] = true;
}

const std::string &XxlJobInfo::getValueOfJobDesc() const noexcept
{
    static const std::string defaultValue = std::string();
    if(jobDesc_)
        return *jobDesc_;
    return defaultValue;
}
const std::shared_ptr<std::string> &XxlJobInfo::getJobDesc() const noexcept
{
    return jobDesc_;
}
void XxlJobInfo::setJobDesc(const std::string &pJobDesc) noexcept
{
    jobDesc_ = std::make_shared<std::string>(pJobDesc);
    dirtyFlag_[2] = true;
}
void XxlJobInfo::setJobDesc(std::string &&pJobDesc) noexcept
{
    jobDesc_ = std::make_shared<std::string>(std::move(pJobDesc));
    dirtyFlag_[2] = true;
}

const ::trantor::Date &XxlJobInfo::getValueOfAddTime() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(addTime_)
        return *addTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &XxlJobInfo::getAddTime() const noexcept
{
    return addTime_;
}
void XxlJobInfo::setAddTime(const ::trantor::Date &pAddTime) noexcept
{
    addTime_ = std::make_shared<::trantor::Date>(pAddTime);
    dirtyFlag_[3] = true;
}
void XxlJobInfo::setAddTimeToNull() noexcept
{
    addTime_.reset();
    dirtyFlag_[3] = true;
}

const ::trantor::Date &XxlJobInfo::getValueOfUpdateTime() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(updateTime_)
        return *updateTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &XxlJobInfo::getUpdateTime() const noexcept
{
    return updateTime_;
}
void XxlJobInfo::setUpdateTime(const ::trantor::Date &pUpdateTime) noexcept
{
    updateTime_ = std::make_shared<::trantor::Date>(pUpdateTime);
    dirtyFlag_[4] = true;
}
void XxlJobInfo::setUpdateTimeToNull() noexcept
{
    updateTime_.reset();
    dirtyFlag_[4] = true;
}

const std::string &XxlJobInfo::getValueOfAuthor() const noexcept
{
    static const std::string defaultValue = std::string();
    if(author_)
        return *author_;
    return defaultValue;
}
const std::shared_ptr<std::string> &XxlJobInfo::getAuthor() const noexcept
{
    return author_;
}
void XxlJobInfo::setAuthor(const std::string &pAuthor) noexcept
{
    author_ = std::make_shared<std::string>(pAuthor);
    dirtyFlag_[5] = true;
}
void XxlJobInfo::setAuthor(std::string &&pAuthor) noexcept
{
    author_ = std::make_shared<std::string>(std::move(pAuthor));
    dirtyFlag_[5] = true;
}
void XxlJobInfo::setAuthorToNull() noexcept
{
    author_.reset();
    dirtyFlag_[5] = true;
}

const std::string &XxlJobInfo::getValueOfAlarmEmail() const noexcept
{
    static const std::string defaultValue = std::string();
    if(alarmEmail_)
        return *alarmEmail_;
    return defaultValue;
}
const std::shared_ptr<std::string> &XxlJobInfo::getAlarmEmail() const noexcept
{
    return alarmEmail_;
}
void XxlJobInfo::setAlarmEmail(const std::string &pAlarmEmail) noexcept
{
    alarmEmail_ = std::make_shared<std::string>(pAlarmEmail);
    dirtyFlag_[6] = true;
}
void XxlJobInfo::setAlarmEmail(std::string &&pAlarmEmail) noexcept
{
    alarmEmail_ = std::make_shared<std::string>(std::move(pAlarmEmail));
    dirtyFlag_[6] = true;
}
void XxlJobInfo::setAlarmEmailToNull() noexcept
{
    alarmEmail_.reset();
    dirtyFlag_[6] = true;
}

const std::string &XxlJobInfo::getValueOfScheduleType() const noexcept
{
    static const std::string defaultValue = std::string();
    if(scheduleType_)
        return *scheduleType_;
    return defaultValue;
}
const std::shared_ptr<std::string> &XxlJobInfo::getScheduleType() const noexcept
{
    return scheduleType_;
}
void XxlJobInfo::setScheduleType(const std::string &pScheduleType) noexcept
{
    scheduleType_ = std::make_shared<std::string>(pScheduleType);
    dirtyFlag_[7] = true;
}
void XxlJobInfo::setScheduleType(std::string &&pScheduleType) noexcept
{
    scheduleType_ = std::make_shared<std::string>(std::move(pScheduleType));
    dirtyFlag_[7] = true;
}

const std::string &XxlJobInfo::getValueOfScheduleConf() const noexcept
{
    static const std::string defaultValue = std::string();
    if(scheduleConf_)
        return *scheduleConf_;
    return defaultValue;
}
const std::shared_ptr<std::string> &XxlJobInfo::getScheduleConf() const noexcept
{
    return scheduleConf_;
}
void XxlJobInfo::setScheduleConf(const std::string &pScheduleConf) noexcept
{
    scheduleConf_ = std::make_shared<std::string>(pScheduleConf);
    dirtyFlag_[8] = true;
}
void XxlJobInfo::setScheduleConf(std::string &&pScheduleConf) noexcept
{
    scheduleConf_ = std::make_shared<std::string>(std::move(pScheduleConf));
    dirtyFlag_[8] = true;
}
void XxlJobInfo::setScheduleConfToNull() noexcept
{
    scheduleConf_.reset();
    dirtyFlag_[8] = true;
}

const std::string &XxlJobInfo::getValueOfMisfireStrategy() const noexcept
{
    static const std::string defaultValue = std::string();
    if(misfireStrategy_)
        return *misfireStrategy_;
    return defaultValue;
}
const std::shared_ptr<std::string> &XxlJobInfo::getMisfireStrategy() const noexcept
{
    return misfireStrategy_;
}
void XxlJobInfo::setMisfireStrategy(const std::string &pMisfireStrategy) noexcept
{
    misfireStrategy_ = std::make_shared<std::string>(pMisfireStrategy);
    dirtyFlag_[9] = true;
}
void XxlJobInfo::setMisfireStrategy(std::string &&pMisfireStrategy) noexcept
{
    misfireStrategy_ = std::make_shared<std::string>(std::move(pMisfireStrategy));
    dirtyFlag_[9] = true;
}

const std::string &XxlJobInfo::getValueOfExecutorRouteStrategy() const noexcept
{
    static const std::string defaultValue = std::string();
    if(executorRouteStrategy_)
        return *executorRouteStrategy_;
    return defaultValue;
}
const std::shared_ptr<std::string> &XxlJobInfo::getExecutorRouteStrategy() const noexcept
{
    return executorRouteStrategy_;
}
void XxlJobInfo::setExecutorRouteStrategy(const std::string &pExecutorRouteStrategy) noexcept
{
    executorRouteStrategy_ = std::make_shared<std::string>(pExecutorRouteStrategy);
    dirtyFlag_[10] = true;
}
void XxlJobInfo::setExecutorRouteStrategy(std::string &&pExecutorRouteStrategy) noexcept
{
    executorRouteStrategy_ = std::make_shared<std::string>(std::move(pExecutorRouteStrategy));
    dirtyFlag_[10] = true;
}
void XxlJobInfo::setExecutorRouteStrategyToNull() noexcept
{
    executorRouteStrategy_.reset();
    dirtyFlag_[10] = true;
}

const std::string &XxlJobInfo::getValueOfExecutorHandler() const noexcept
{
    static const std::string defaultValue = std::string();
    if(executorHandler_)
        return *executorHandler_;
    return defaultValue;
}
const std::shared_ptr<std::string> &XxlJobInfo::getExecutorHandler() const noexcept
{
    return executorHandler_;
}
void XxlJobInfo::setExecutorHandler(const std::string &pExecutorHandler) noexcept
{
    executorHandler_ = std::make_shared<std::string>(pExecutorHandler);
    dirtyFlag_[11] = true;
}
void XxlJobInfo::setExecutorHandler(std::string &&pExecutorHandler) noexcept
{
    executorHandler_ = std::make_shared<std::string>(std::move(pExecutorHandler));
    dirtyFlag_[11] = true;
}
void XxlJobInfo::setExecutorHandlerToNull() noexcept
{
    executorHandler_.reset();
    dirtyFlag_[11] = true;
}

const std::string &XxlJobInfo::getValueOfExecutorParam() const noexcept
{
    static const std::string defaultValue = std::string();
    if(executorParam_)
        return *executorParam_;
    return defaultValue;
}
const std::shared_ptr<std::string> &XxlJobInfo::getExecutorParam() const noexcept
{
    return executorParam_;
}
void XxlJobInfo::setExecutorParam(const std::string &pExecutorParam) noexcept
{
    executorParam_ = std::make_shared<std::string>(pExecutorParam);
    dirtyFlag_[12] = true;
}
void XxlJobInfo::setExecutorParam(std::string &&pExecutorParam) noexcept
{
    executorParam_ = std::make_shared<std::string>(std::move(pExecutorParam));
    dirtyFlag_[12] = true;
}
void XxlJobInfo::setExecutorParamToNull() noexcept
{
    executorParam_.reset();
    dirtyFlag_[12] = true;
}

const std::string &XxlJobInfo::getValueOfExecutorBlockStrategy() const noexcept
{
    static const std::string defaultValue = std::string();
    if(executorBlockStrategy_)
        return *executorBlockStrategy_;
    return defaultValue;
}
const std::shared_ptr<std::string> &XxlJobInfo::getExecutorBlockStrategy() const noexcept
{
    return executorBlockStrategy_;
}
void XxlJobInfo::setExecutorBlockStrategy(const std::string &pExecutorBlockStrategy) noexcept
{
    executorBlockStrategy_ = std::make_shared<std::string>(pExecutorBlockStrategy);
    dirtyFlag_[13] = true;
}
void XxlJobInfo::setExecutorBlockStrategy(std::string &&pExecutorBlockStrategy) noexcept
{
    executorBlockStrategy_ = std::make_shared<std::string>(std::move(pExecutorBlockStrategy));
    dirtyFlag_[13] = true;
}
void XxlJobInfo::setExecutorBlockStrategyToNull() noexcept
{
    executorBlockStrategy_.reset();
    dirtyFlag_[13] = true;
}

const int32_t &XxlJobInfo::getValueOfExecutorTimeout() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(executorTimeout_)
        return *executorTimeout_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &XxlJobInfo::getExecutorTimeout() const noexcept
{
    return executorTimeout_;
}
void XxlJobInfo::setExecutorTimeout(const int32_t &pExecutorTimeout) noexcept
{
    executorTimeout_ = std::make_shared<int32_t>(pExecutorTimeout);
    dirtyFlag_[14] = true;
}

const int32_t &XxlJobInfo::getValueOfExecutorFailRetryCount() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(executorFailRetryCount_)
        return *executorFailRetryCount_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &XxlJobInfo::getExecutorFailRetryCount() const noexcept
{
    return executorFailRetryCount_;
}
void XxlJobInfo::setExecutorFailRetryCount(const int32_t &pExecutorFailRetryCount) noexcept
{
    executorFailRetryCount_ = std::make_shared<int32_t>(pExecutorFailRetryCount);
    dirtyFlag_[15] = true;
}

const std::string &XxlJobInfo::getValueOfGlueType() const noexcept
{
    static const std::string defaultValue = std::string();
    if(glueType_)
        return *glueType_;
    return defaultValue;
}
const std::shared_ptr<std::string> &XxlJobInfo::getGlueType() const noexcept
{
    return glueType_;
}
void XxlJobInfo::setGlueType(const std::string &pGlueType) noexcept
{
    glueType_ = std::make_shared<std::string>(pGlueType);
    dirtyFlag_[16] = true;
}
void XxlJobInfo::setGlueType(std::string &&pGlueType) noexcept
{
    glueType_ = std::make_shared<std::string>(std::move(pGlueType));
    dirtyFlag_[16] = true;
}

const std::string &XxlJobInfo::getValueOfGlueSource() const noexcept
{
    static const std::string defaultValue = std::string();
    if(glueSource_)
        return *glueSource_;
    return defaultValue;
}
const std::shared_ptr<std::string> &XxlJobInfo::getGlueSource() const noexcept
{
    return glueSource_;
}
void XxlJobInfo::setGlueSource(const std::string &pGlueSource) noexcept
{
    glueSource_ = std::make_shared<std::string>(pGlueSource);
    dirtyFlag_[17] = true;
}
void XxlJobInfo::setGlueSource(std::string &&pGlueSource) noexcept
{
    glueSource_ = std::make_shared<std::string>(std::move(pGlueSource));
    dirtyFlag_[17] = true;
}
void XxlJobInfo::setGlueSourceToNull() noexcept
{
    glueSource_.reset();
    dirtyFlag_[17] = true;
}

const std::string &XxlJobInfo::getValueOfGlueRemark() const noexcept
{
    static const std::string defaultValue = std::string();
    if(glueRemark_)
        return *glueRemark_;
    return defaultValue;
}
const std::shared_ptr<std::string> &XxlJobInfo::getGlueRemark() const noexcept
{
    return glueRemark_;
}
void XxlJobInfo::setGlueRemark(const std::string &pGlueRemark) noexcept
{
    glueRemark_ = std::make_shared<std::string>(pGlueRemark);
    dirtyFlag_[18] = true;
}
void XxlJobInfo::setGlueRemark(std::string &&pGlueRemark) noexcept
{
    glueRemark_ = std::make_shared<std::string>(std::move(pGlueRemark));
    dirtyFlag_[18] = true;
}
void XxlJobInfo::setGlueRemarkToNull() noexcept
{
    glueRemark_.reset();
    dirtyFlag_[18] = true;
}

const ::trantor::Date &XxlJobInfo::getValueOfGlueUpdatetime() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(glueUpdatetime_)
        return *glueUpdatetime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &XxlJobInfo::getGlueUpdatetime() const noexcept
{
    return glueUpdatetime_;
}
void XxlJobInfo::setGlueUpdatetime(const ::trantor::Date &pGlueUpdatetime) noexcept
{
    glueUpdatetime_ = std::make_shared<::trantor::Date>(pGlueUpdatetime);
    dirtyFlag_[19] = true;
}
void XxlJobInfo::setGlueUpdatetimeToNull() noexcept
{
    glueUpdatetime_.reset();
    dirtyFlag_[19] = true;
}

const std::string &XxlJobInfo::getValueOfChildJobid() const noexcept
{
    static const std::string defaultValue = std::string();
    if(childJobid_)
        return *childJobid_;
    return defaultValue;
}
const std::shared_ptr<std::string> &XxlJobInfo::getChildJobid() const noexcept
{
    return childJobid_;
}
void XxlJobInfo::setChildJobid(const std::string &pChildJobid) noexcept
{
    childJobid_ = std::make_shared<std::string>(pChildJobid);
    dirtyFlag_[20] = true;
}
void XxlJobInfo::setChildJobid(std::string &&pChildJobid) noexcept
{
    childJobid_ = std::make_shared<std::string>(std::move(pChildJobid));
    dirtyFlag_[20] = true;
}
void XxlJobInfo::setChildJobidToNull() noexcept
{
    childJobid_.reset();
    dirtyFlag_[20] = true;
}

const int8_t &XxlJobInfo::getValueOfTriggerStatus() const noexcept
{
    static const int8_t defaultValue = int8_t();
    if(triggerStatus_)
        return *triggerStatus_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &XxlJobInfo::getTriggerStatus() const noexcept
{
    return triggerStatus_;
}
void XxlJobInfo::setTriggerStatus(const int8_t &pTriggerStatus) noexcept
{
    triggerStatus_ = std::make_shared<int8_t>(pTriggerStatus);
    dirtyFlag_[21] = true;
}

const int64_t &XxlJobInfo::getValueOfTriggerLastTime() const noexcept
{
    static const int64_t defaultValue = int64_t();
    if(triggerLastTime_)
        return *triggerLastTime_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &XxlJobInfo::getTriggerLastTime() const noexcept
{
    return triggerLastTime_;
}
void XxlJobInfo::setTriggerLastTime(const int64_t &pTriggerLastTime) noexcept
{
    triggerLastTime_ = std::make_shared<int64_t>(pTriggerLastTime);
    dirtyFlag_[22] = true;
}

const int64_t &XxlJobInfo::getValueOfTriggerNextTime() const noexcept
{
    static const int64_t defaultValue = int64_t();
    if(triggerNextTime_)
        return *triggerNextTime_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &XxlJobInfo::getTriggerNextTime() const noexcept
{
    return triggerNextTime_;
}
void XxlJobInfo::setTriggerNextTime(const int64_t &pTriggerNextTime) noexcept
{
    triggerNextTime_ = std::make_shared<int64_t>(pTriggerNextTime);
    dirtyFlag_[23] = true;
}

void XxlJobInfo::updateId(const uint64_t id)
{
    id_ = std::make_shared<int32_t>(static_cast<int32_t>(id));
}

const std::vector<std::string> &XxlJobInfo::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "job_group",
        "job_desc",
        "add_time",
        "update_time",
        "author",
        "alarm_email",
        "schedule_type",
        "schedule_conf",
        "misfire_strategy",
        "executor_route_strategy",
        "executor_handler",
        "executor_param",
        "executor_block_strategy",
        "executor_timeout",
        "executor_fail_retry_count",
        "glue_type",
        "glue_source",
        "glue_remark",
        "glue_updatetime",
        "child_jobid",
        "trigger_status",
        "trigger_last_time",
        "trigger_next_time"
    };
    return inCols;
}

void XxlJobInfo::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getJobGroup())
        {
            binder << getValueOfJobGroup();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getJobDesc())
        {
            binder << getValueOfJobDesc();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getAddTime())
        {
            binder << getValueOfAddTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getAuthor())
        {
            binder << getValueOfAuthor();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getAlarmEmail())
        {
            binder << getValueOfAlarmEmail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getScheduleType())
        {
            binder << getValueOfScheduleType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getScheduleConf())
        {
            binder << getValueOfScheduleConf();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getMisfireStrategy())
        {
            binder << getValueOfMisfireStrategy();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getExecutorRouteStrategy())
        {
            binder << getValueOfExecutorRouteStrategy();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getExecutorHandler())
        {
            binder << getValueOfExecutorHandler();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getExecutorParam())
        {
            binder << getValueOfExecutorParam();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getExecutorBlockStrategy())
        {
            binder << getValueOfExecutorBlockStrategy();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getExecutorTimeout())
        {
            binder << getValueOfExecutorTimeout();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getExecutorFailRetryCount())
        {
            binder << getValueOfExecutorFailRetryCount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getGlueType())
        {
            binder << getValueOfGlueType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[17])
    {
        if(getGlueSource())
        {
            binder << getValueOfGlueSource();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[18])
    {
        if(getGlueRemark())
        {
            binder << getValueOfGlueRemark();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[19])
    {
        if(getGlueUpdatetime())
        {
            binder << getValueOfGlueUpdatetime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[20])
    {
        if(getChildJobid())
        {
            binder << getValueOfChildJobid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[21])
    {
        if(getTriggerStatus())
        {
            binder << getValueOfTriggerStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[22])
    {
        if(getTriggerLastTime())
        {
            binder << getValueOfTriggerLastTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[23])
    {
        if(getTriggerNextTime())
        {
            binder << getValueOfTriggerNextTime();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> XxlJobInfo::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    if(dirtyFlag_[12])
    {
        ret.push_back(getColumnName(12));
    }
    if(dirtyFlag_[13])
    {
        ret.push_back(getColumnName(13));
    }
    if(dirtyFlag_[14])
    {
        ret.push_back(getColumnName(14));
    }
    if(dirtyFlag_[15])
    {
        ret.push_back(getColumnName(15));
    }
    if(dirtyFlag_[16])
    {
        ret.push_back(getColumnName(16));
    }
    if(dirtyFlag_[17])
    {
        ret.push_back(getColumnName(17));
    }
    if(dirtyFlag_[18])
    {
        ret.push_back(getColumnName(18));
    }
    if(dirtyFlag_[19])
    {
        ret.push_back(getColumnName(19));
    }
    if(dirtyFlag_[20])
    {
        ret.push_back(getColumnName(20));
    }
    if(dirtyFlag_[21])
    {
        ret.push_back(getColumnName(21));
    }
    if(dirtyFlag_[22])
    {
        ret.push_back(getColumnName(22));
    }
    if(dirtyFlag_[23])
    {
        ret.push_back(getColumnName(23));
    }
    return ret;
}

void XxlJobInfo::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getJobGroup())
        {
            binder << getValueOfJobGroup();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getJobDesc())
        {
            binder << getValueOfJobDesc();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getAddTime())
        {
            binder << getValueOfAddTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getAuthor())
        {
            binder << getValueOfAuthor();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getAlarmEmail())
        {
            binder << getValueOfAlarmEmail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getScheduleType())
        {
            binder << getValueOfScheduleType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getScheduleConf())
        {
            binder << getValueOfScheduleConf();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getMisfireStrategy())
        {
            binder << getValueOfMisfireStrategy();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getExecutorRouteStrategy())
        {
            binder << getValueOfExecutorRouteStrategy();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getExecutorHandler())
        {
            binder << getValueOfExecutorHandler();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getExecutorParam())
        {
            binder << getValueOfExecutorParam();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getExecutorBlockStrategy())
        {
            binder << getValueOfExecutorBlockStrategy();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getExecutorTimeout())
        {
            binder << getValueOfExecutorTimeout();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getExecutorFailRetryCount())
        {
            binder << getValueOfExecutorFailRetryCount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getGlueType())
        {
            binder << getValueOfGlueType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[17])
    {
        if(getGlueSource())
        {
            binder << getValueOfGlueSource();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[18])
    {
        if(getGlueRemark())
        {
            binder << getValueOfGlueRemark();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[19])
    {
        if(getGlueUpdatetime())
        {
            binder << getValueOfGlueUpdatetime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[20])
    {
        if(getChildJobid())
        {
            binder << getValueOfChildJobid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[21])
    {
        if(getTriggerStatus())
        {
            binder << getValueOfTriggerStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[22])
    {
        if(getTriggerLastTime())
        {
            binder << getValueOfTriggerLastTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[23])
    {
        if(getTriggerNextTime())
        {
            binder << getValueOfTriggerNextTime();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value XxlJobInfo::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getJobGroup())
    {
        ret["job_group"]=getValueOfJobGroup();
    }
    else
    {
        ret["job_group"]=Json::Value();
    }
    if(getJobDesc())
    {
        ret["job_desc"]=getValueOfJobDesc();
    }
    else
    {
        ret["job_desc"]=Json::Value();
    }
    if(getAddTime())
    {
        ret["add_time"]=getAddTime()->toDbStringLocal();
    }
    else
    {
        ret["add_time"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["update_time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["update_time"]=Json::Value();
    }
    if(getAuthor())
    {
        ret["author"]=getValueOfAuthor();
    }
    else
    {
        ret["author"]=Json::Value();
    }
    if(getAlarmEmail())
    {
        ret["alarm_email"]=getValueOfAlarmEmail();
    }
    else
    {
        ret["alarm_email"]=Json::Value();
    }
    if(getScheduleType())
    {
        ret["schedule_type"]=getValueOfScheduleType();
    }
    else
    {
        ret["schedule_type"]=Json::Value();
    }
    if(getScheduleConf())
    {
        ret["schedule_conf"]=getValueOfScheduleConf();
    }
    else
    {
        ret["schedule_conf"]=Json::Value();
    }
    if(getMisfireStrategy())
    {
        ret["misfire_strategy"]=getValueOfMisfireStrategy();
    }
    else
    {
        ret["misfire_strategy"]=Json::Value();
    }
    if(getExecutorRouteStrategy())
    {
        ret["executor_route_strategy"]=getValueOfExecutorRouteStrategy();
    }
    else
    {
        ret["executor_route_strategy"]=Json::Value();
    }
    if(getExecutorHandler())
    {
        ret["executor_handler"]=getValueOfExecutorHandler();
    }
    else
    {
        ret["executor_handler"]=Json::Value();
    }
    if(getExecutorParam())
    {
        ret["executor_param"]=getValueOfExecutorParam();
    }
    else
    {
        ret["executor_param"]=Json::Value();
    }
    if(getExecutorBlockStrategy())
    {
        ret["executor_block_strategy"]=getValueOfExecutorBlockStrategy();
    }
    else
    {
        ret["executor_block_strategy"]=Json::Value();
    }
    if(getExecutorTimeout())
    {
        ret["executor_timeout"]=getValueOfExecutorTimeout();
    }
    else
    {
        ret["executor_timeout"]=Json::Value();
    }
    if(getExecutorFailRetryCount())
    {
        ret["executor_fail_retry_count"]=getValueOfExecutorFailRetryCount();
    }
    else
    {
        ret["executor_fail_retry_count"]=Json::Value();
    }
    if(getGlueType())
    {
        ret["glue_type"]=getValueOfGlueType();
    }
    else
    {
        ret["glue_type"]=Json::Value();
    }
    if(getGlueSource())
    {
        ret["glue_source"]=getValueOfGlueSource();
    }
    else
    {
        ret["glue_source"]=Json::Value();
    }
    if(getGlueRemark())
    {
        ret["glue_remark"]=getValueOfGlueRemark();
    }
    else
    {
        ret["glue_remark"]=Json::Value();
    }
    if(getGlueUpdatetime())
    {
        ret["glue_updatetime"]=getGlueUpdatetime()->toDbStringLocal();
    }
    else
    {
        ret["glue_updatetime"]=Json::Value();
    }
    if(getChildJobid())
    {
        ret["child_jobid"]=getValueOfChildJobid();
    }
    else
    {
        ret["child_jobid"]=Json::Value();
    }
    if(getTriggerStatus())
    {
        ret["trigger_status"]=getValueOfTriggerStatus();
    }
    else
    {
        ret["trigger_status"]=Json::Value();
    }
    if(getTriggerLastTime())
    {
        ret["trigger_last_time"]=(Json::Int64)getValueOfTriggerLastTime();
    }
    else
    {
        ret["trigger_last_time"]=Json::Value();
    }
    if(getTriggerNextTime())
    {
        ret["trigger_next_time"]=(Json::Int64)getValueOfTriggerNextTime();
    }
    else
    {
        ret["trigger_next_time"]=Json::Value();
    }
    return ret;
}

Json::Value XxlJobInfo::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 24)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getJobGroup())
            {
                ret[pMasqueradingVector[1]]=getValueOfJobGroup();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getJobDesc())
            {
                ret[pMasqueradingVector[2]]=getValueOfJobDesc();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getAddTime())
            {
                ret[pMasqueradingVector[3]]=getAddTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getUpdateTime())
            {
                ret[pMasqueradingVector[4]]=getUpdateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getAuthor())
            {
                ret[pMasqueradingVector[5]]=getValueOfAuthor();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getAlarmEmail())
            {
                ret[pMasqueradingVector[6]]=getValueOfAlarmEmail();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getScheduleType())
            {
                ret[pMasqueradingVector[7]]=getValueOfScheduleType();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getScheduleConf())
            {
                ret[pMasqueradingVector[8]]=getValueOfScheduleConf();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getMisfireStrategy())
            {
                ret[pMasqueradingVector[9]]=getValueOfMisfireStrategy();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getExecutorRouteStrategy())
            {
                ret[pMasqueradingVector[10]]=getValueOfExecutorRouteStrategy();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getExecutorHandler())
            {
                ret[pMasqueradingVector[11]]=getValueOfExecutorHandler();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getExecutorParam())
            {
                ret[pMasqueradingVector[12]]=getValueOfExecutorParam();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[13].empty())
        {
            if(getExecutorBlockStrategy())
            {
                ret[pMasqueradingVector[13]]=getValueOfExecutorBlockStrategy();
            }
            else
            {
                ret[pMasqueradingVector[13]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[14].empty())
        {
            if(getExecutorTimeout())
            {
                ret[pMasqueradingVector[14]]=getValueOfExecutorTimeout();
            }
            else
            {
                ret[pMasqueradingVector[14]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[15].empty())
        {
            if(getExecutorFailRetryCount())
            {
                ret[pMasqueradingVector[15]]=getValueOfExecutorFailRetryCount();
            }
            else
            {
                ret[pMasqueradingVector[15]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[16].empty())
        {
            if(getGlueType())
            {
                ret[pMasqueradingVector[16]]=getValueOfGlueType();
            }
            else
            {
                ret[pMasqueradingVector[16]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[17].empty())
        {
            if(getGlueSource())
            {
                ret[pMasqueradingVector[17]]=getValueOfGlueSource();
            }
            else
            {
                ret[pMasqueradingVector[17]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[18].empty())
        {
            if(getGlueRemark())
            {
                ret[pMasqueradingVector[18]]=getValueOfGlueRemark();
            }
            else
            {
                ret[pMasqueradingVector[18]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[19].empty())
        {
            if(getGlueUpdatetime())
            {
                ret[pMasqueradingVector[19]]=getGlueUpdatetime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[19]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[20].empty())
        {
            if(getChildJobid())
            {
                ret[pMasqueradingVector[20]]=getValueOfChildJobid();
            }
            else
            {
                ret[pMasqueradingVector[20]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[21].empty())
        {
            if(getTriggerStatus())
            {
                ret[pMasqueradingVector[21]]=getValueOfTriggerStatus();
            }
            else
            {
                ret[pMasqueradingVector[21]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[22].empty())
        {
            if(getTriggerLastTime())
            {
                ret[pMasqueradingVector[22]]=(Json::Int64)getValueOfTriggerLastTime();
            }
            else
            {
                ret[pMasqueradingVector[22]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[23].empty())
        {
            if(getTriggerNextTime())
            {
                ret[pMasqueradingVector[23]]=(Json::Int64)getValueOfTriggerNextTime();
            }
            else
            {
                ret[pMasqueradingVector[23]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getJobGroup())
    {
        ret["job_group"]=getValueOfJobGroup();
    }
    else
    {
        ret["job_group"]=Json::Value();
    }
    if(getJobDesc())
    {
        ret["job_desc"]=getValueOfJobDesc();
    }
    else
    {
        ret["job_desc"]=Json::Value();
    }
    if(getAddTime())
    {
        ret["add_time"]=getAddTime()->toDbStringLocal();
    }
    else
    {
        ret["add_time"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["update_time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["update_time"]=Json::Value();
    }
    if(getAuthor())
    {
        ret["author"]=getValueOfAuthor();
    }
    else
    {
        ret["author"]=Json::Value();
    }
    if(getAlarmEmail())
    {
        ret["alarm_email"]=getValueOfAlarmEmail();
    }
    else
    {
        ret["alarm_email"]=Json::Value();
    }
    if(getScheduleType())
    {
        ret["schedule_type"]=getValueOfScheduleType();
    }
    else
    {
        ret["schedule_type"]=Json::Value();
    }
    if(getScheduleConf())
    {
        ret["schedule_conf"]=getValueOfScheduleConf();
    }
    else
    {
        ret["schedule_conf"]=Json::Value();
    }
    if(getMisfireStrategy())
    {
        ret["misfire_strategy"]=getValueOfMisfireStrategy();
    }
    else
    {
        ret["misfire_strategy"]=Json::Value();
    }
    if(getExecutorRouteStrategy())
    {
        ret["executor_route_strategy"]=getValueOfExecutorRouteStrategy();
    }
    else
    {
        ret["executor_route_strategy"]=Json::Value();
    }
    if(getExecutorHandler())
    {
        ret["executor_handler"]=getValueOfExecutorHandler();
    }
    else
    {
        ret["executor_handler"]=Json::Value();
    }
    if(getExecutorParam())
    {
        ret["executor_param"]=getValueOfExecutorParam();
    }
    else
    {
        ret["executor_param"]=Json::Value();
    }
    if(getExecutorBlockStrategy())
    {
        ret["executor_block_strategy"]=getValueOfExecutorBlockStrategy();
    }
    else
    {
        ret["executor_block_strategy"]=Json::Value();
    }
    if(getExecutorTimeout())
    {
        ret["executor_timeout"]=getValueOfExecutorTimeout();
    }
    else
    {
        ret["executor_timeout"]=Json::Value();
    }
    if(getExecutorFailRetryCount())
    {
        ret["executor_fail_retry_count"]=getValueOfExecutorFailRetryCount();
    }
    else
    {
        ret["executor_fail_retry_count"]=Json::Value();
    }
    if(getGlueType())
    {
        ret["glue_type"]=getValueOfGlueType();
    }
    else
    {
        ret["glue_type"]=Json::Value();
    }
    if(getGlueSource())
    {
        ret["glue_source"]=getValueOfGlueSource();
    }
    else
    {
        ret["glue_source"]=Json::Value();
    }
    if(getGlueRemark())
    {
        ret["glue_remark"]=getValueOfGlueRemark();
    }
    else
    {
        ret["glue_remark"]=Json::Value();
    }
    if(getGlueUpdatetime())
    {
        ret["glue_updatetime"]=getGlueUpdatetime()->toDbStringLocal();
    }
    else
    {
        ret["glue_updatetime"]=Json::Value();
    }
    if(getChildJobid())
    {
        ret["child_jobid"]=getValueOfChildJobid();
    }
    else
    {
        ret["child_jobid"]=Json::Value();
    }
    if(getTriggerStatus())
    {
        ret["trigger_status"]=getValueOfTriggerStatus();
    }
    else
    {
        ret["trigger_status"]=Json::Value();
    }
    if(getTriggerLastTime())
    {
        ret["trigger_last_time"]=(Json::Int64)getValueOfTriggerLastTime();
    }
    else
    {
        ret["trigger_last_time"]=Json::Value();
    }
    if(getTriggerNextTime())
    {
        ret["trigger_next_time"]=(Json::Int64)getValueOfTriggerNextTime();
    }
    else
    {
        ret["trigger_next_time"]=Json::Value();
    }
    return ret;
}

bool XxlJobInfo::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("job_group"))
    {
        if(!validJsonOfField(1, "job_group", pJson["job_group"], err, true))
            return false;
    }
    else
    {
        err="The job_group column cannot be null";
        return false;
    }
    if(pJson.isMember("job_desc"))
    {
        if(!validJsonOfField(2, "job_desc", pJson["job_desc"], err, true))
            return false;
    }
    else
    {
        err="The job_desc column cannot be null";
        return false;
    }
    if(pJson.isMember("add_time"))
    {
        if(!validJsonOfField(3, "add_time", pJson["add_time"], err, true))
            return false;
    }
    if(pJson.isMember("update_time"))
    {
        if(!validJsonOfField(4, "update_time", pJson["update_time"], err, true))
            return false;
    }
    if(pJson.isMember("author"))
    {
        if(!validJsonOfField(5, "author", pJson["author"], err, true))
            return false;
    }
    if(pJson.isMember("alarm_email"))
    {
        if(!validJsonOfField(6, "alarm_email", pJson["alarm_email"], err, true))
            return false;
    }
    if(pJson.isMember("schedule_type"))
    {
        if(!validJsonOfField(7, "schedule_type", pJson["schedule_type"], err, true))
            return false;
    }
    if(pJson.isMember("schedule_conf"))
    {
        if(!validJsonOfField(8, "schedule_conf", pJson["schedule_conf"], err, true))
            return false;
    }
    if(pJson.isMember("misfire_strategy"))
    {
        if(!validJsonOfField(9, "misfire_strategy", pJson["misfire_strategy"], err, true))
            return false;
    }
    if(pJson.isMember("executor_route_strategy"))
    {
        if(!validJsonOfField(10, "executor_route_strategy", pJson["executor_route_strategy"], err, true))
            return false;
    }
    if(pJson.isMember("executor_handler"))
    {
        if(!validJsonOfField(11, "executor_handler", pJson["executor_handler"], err, true))
            return false;
    }
    if(pJson.isMember("executor_param"))
    {
        if(!validJsonOfField(12, "executor_param", pJson["executor_param"], err, true))
            return false;
    }
    if(pJson.isMember("executor_block_strategy"))
    {
        if(!validJsonOfField(13, "executor_block_strategy", pJson["executor_block_strategy"], err, true))
            return false;
    }
    if(pJson.isMember("executor_timeout"))
    {
        if(!validJsonOfField(14, "executor_timeout", pJson["executor_timeout"], err, true))
            return false;
    }
    if(pJson.isMember("executor_fail_retry_count"))
    {
        if(!validJsonOfField(15, "executor_fail_retry_count", pJson["executor_fail_retry_count"], err, true))
            return false;
    }
    if(pJson.isMember("glue_type"))
    {
        if(!validJsonOfField(16, "glue_type", pJson["glue_type"], err, true))
            return false;
    }
    else
    {
        err="The glue_type column cannot be null";
        return false;
    }
    if(pJson.isMember("glue_source"))
    {
        if(!validJsonOfField(17, "glue_source", pJson["glue_source"], err, true))
            return false;
    }
    if(pJson.isMember("glue_remark"))
    {
        if(!validJsonOfField(18, "glue_remark", pJson["glue_remark"], err, true))
            return false;
    }
    if(pJson.isMember("glue_updatetime"))
    {
        if(!validJsonOfField(19, "glue_updatetime", pJson["glue_updatetime"], err, true))
            return false;
    }
    if(pJson.isMember("child_jobid"))
    {
        if(!validJsonOfField(20, "child_jobid", pJson["child_jobid"], err, true))
            return false;
    }
    if(pJson.isMember("trigger_status"))
    {
        if(!validJsonOfField(21, "trigger_status", pJson["trigger_status"], err, true))
            return false;
    }
    if(pJson.isMember("trigger_last_time"))
    {
        if(!validJsonOfField(22, "trigger_last_time", pJson["trigger_last_time"], err, true))
            return false;
    }
    if(pJson.isMember("trigger_next_time"))
    {
        if(!validJsonOfField(23, "trigger_next_time", pJson["trigger_next_time"], err, true))
            return false;
    }
    return true;
}
bool XxlJobInfo::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                    const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err)
{
    if(pMasqueradingVector.size() != 24)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[9].empty())
      {
          if(pJson.isMember(pMasqueradingVector[9]))
          {
              if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[10].empty())
      {
          if(pJson.isMember(pMasqueradingVector[10]))
          {
              if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[11].empty())
      {
          if(pJson.isMember(pMasqueradingVector[11]))
          {
              if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[12].empty())
      {
          if(pJson.isMember(pMasqueradingVector[12]))
          {
              if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[13].empty())
      {
          if(pJson.isMember(pMasqueradingVector[13]))
          {
              if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[14].empty())
      {
          if(pJson.isMember(pMasqueradingVector[14]))
          {
              if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[15].empty())
      {
          if(pJson.isMember(pMasqueradingVector[15]))
          {
              if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[16].empty())
      {
          if(pJson.isMember(pMasqueradingVector[16]))
          {
              if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[16] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[17].empty())
      {
          if(pJson.isMember(pMasqueradingVector[17]))
          {
              if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[18].empty())
      {
          if(pJson.isMember(pMasqueradingVector[18]))
          {
              if(!validJsonOfField(18, pMasqueradingVector[18], pJson[pMasqueradingVector[18]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[19].empty())
      {
          if(pJson.isMember(pMasqueradingVector[19]))
          {
              if(!validJsonOfField(19, pMasqueradingVector[19], pJson[pMasqueradingVector[19]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[20].empty())
      {
          if(pJson.isMember(pMasqueradingVector[20]))
          {
              if(!validJsonOfField(20, pMasqueradingVector[20], pJson[pMasqueradingVector[20]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[21].empty())
      {
          if(pJson.isMember(pMasqueradingVector[21]))
          {
              if(!validJsonOfField(21, pMasqueradingVector[21], pJson[pMasqueradingVector[21]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[22].empty())
      {
          if(pJson.isMember(pMasqueradingVector[22]))
          {
              if(!validJsonOfField(22, pMasqueradingVector[22], pJson[pMasqueradingVector[22]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[23].empty())
      {
          if(pJson.isMember(pMasqueradingVector[23]))
          {
              if(!validJsonOfField(23, pMasqueradingVector[23], pJson[pMasqueradingVector[23]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool XxlJobInfo::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("job_group"))
    {
        if(!validJsonOfField(1, "job_group", pJson["job_group"], err, false))
            return false;
    }
    if(pJson.isMember("job_desc"))
    {
        if(!validJsonOfField(2, "job_desc", pJson["job_desc"], err, false))
            return false;
    }
    if(pJson.isMember("add_time"))
    {
        if(!validJsonOfField(3, "add_time", pJson["add_time"], err, false))
            return false;
    }
    if(pJson.isMember("update_time"))
    {
        if(!validJsonOfField(4, "update_time", pJson["update_time"], err, false))
            return false;
    }
    if(pJson.isMember("author"))
    {
        if(!validJsonOfField(5, "author", pJson["author"], err, false))
            return false;
    }
    if(pJson.isMember("alarm_email"))
    {
        if(!validJsonOfField(6, "alarm_email", pJson["alarm_email"], err, false))
            return false;
    }
    if(pJson.isMember("schedule_type"))
    {
        if(!validJsonOfField(7, "schedule_type", pJson["schedule_type"], err, false))
            return false;
    }
    if(pJson.isMember("schedule_conf"))
    {
        if(!validJsonOfField(8, "schedule_conf", pJson["schedule_conf"], err, false))
            return false;
    }
    if(pJson.isMember("misfire_strategy"))
    {
        if(!validJsonOfField(9, "misfire_strategy", pJson["misfire_strategy"], err, false))
            return false;
    }
    if(pJson.isMember("executor_route_strategy"))
    {
        if(!validJsonOfField(10, "executor_route_strategy", pJson["executor_route_strategy"], err, false))
            return false;
    }
    if(pJson.isMember("executor_handler"))
    {
        if(!validJsonOfField(11, "executor_handler", pJson["executor_handler"], err, false))
            return false;
    }
    if(pJson.isMember("executor_param"))
    {
        if(!validJsonOfField(12, "executor_param", pJson["executor_param"], err, false))
            return false;
    }
    if(pJson.isMember("executor_block_strategy"))
    {
        if(!validJsonOfField(13, "executor_block_strategy", pJson["executor_block_strategy"], err, false))
            return false;
    }
    if(pJson.isMember("executor_timeout"))
    {
        if(!validJsonOfField(14, "executor_timeout", pJson["executor_timeout"], err, false))
            return false;
    }
    if(pJson.isMember("executor_fail_retry_count"))
    {
        if(!validJsonOfField(15, "executor_fail_retry_count", pJson["executor_fail_retry_count"], err, false))
            return false;
    }
    if(pJson.isMember("glue_type"))
    {
        if(!validJsonOfField(16, "glue_type", pJson["glue_type"], err, false))
            return false;
    }
    if(pJson.isMember("glue_source"))
    {
        if(!validJsonOfField(17, "glue_source", pJson["glue_source"], err, false))
            return false;
    }
    if(pJson.isMember("glue_remark"))
    {
        if(!validJsonOfField(18, "glue_remark", pJson["glue_remark"], err, false))
            return false;
    }
    if(pJson.isMember("glue_updatetime"))
    {
        if(!validJsonOfField(19, "glue_updatetime", pJson["glue_updatetime"], err, false))
            return false;
    }
    if(pJson.isMember("child_jobid"))
    {
        if(!validJsonOfField(20, "child_jobid", pJson["child_jobid"], err, false))
            return false;
    }
    if(pJson.isMember("trigger_status"))
    {
        if(!validJsonOfField(21, "trigger_status", pJson["trigger_status"], err, false))
            return false;
    }
    if(pJson.isMember("trigger_last_time"))
    {
        if(!validJsonOfField(22, "trigger_last_time", pJson["trigger_last_time"], err, false))
            return false;
    }
    if(pJson.isMember("trigger_next_time"))
    {
        if(!validJsonOfField(23, "trigger_next_time", pJson["trigger_next_time"], err, false))
            return false;
    }
    return true;
}
bool XxlJobInfo::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                  const std::vector<std::string> &pMasqueradingVector,
                                                  std::string &err)
{
    if(pMasqueradingVector.size() != 24)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
      if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
      {
          if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
              return false;
      }
      if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
      {
          if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
              return false;
      }
      if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
      {
          if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
              return false;
      }
      if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
      {
          if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
              return false;
      }
      if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
      {
          if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, false))
              return false;
      }
      if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
      {
          if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, false))
              return false;
      }
      if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
      {
          if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, false))
              return false;
      }
      if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
      {
          if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, false))
              return false;
      }
      if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
      {
          if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, false))
              return false;
      }
      if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
      {
          if(!validJsonOfField(18, pMasqueradingVector[18], pJson[pMasqueradingVector[18]], err, false))
              return false;
      }
      if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
      {
          if(!validJsonOfField(19, pMasqueradingVector[19], pJson[pMasqueradingVector[19]], err, false))
              return false;
      }
      if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
      {
          if(!validJsonOfField(20, pMasqueradingVector[20], pJson[pMasqueradingVector[20]], err, false))
              return false;
      }
      if(!pMasqueradingVector[21].empty() && pJson.isMember(pMasqueradingVector[21]))
      {
          if(!validJsonOfField(21, pMasqueradingVector[21], pJson[pMasqueradingVector[21]], err, false))
              return false;
      }
      if(!pMasqueradingVector[22].empty() && pJson.isMember(pMasqueradingVector[22]))
      {
          if(!validJsonOfField(22, pMasqueradingVector[22], pJson[pMasqueradingVector[22]], err, false))
              return false;
      }
      if(!pMasqueradingVector[23].empty() && pJson.isMember(pMasqueradingVector[23]))
      {
          if(!validJsonOfField(23, pMasqueradingVector[23], pJson[pMasqueradingVector[23]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool XxlJobInfo::validJsonOfField(size_t index,
                                  const std::string &fieldName,
                                  const Json::Value &pJson,
                                  std::string &err,
                                  bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 64)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 64)";
                return false;
            }

            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 7:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;
            }

            break;
        case 8:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 128)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 128)";
                return false;
            }

            break;
        case 9:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;
            }

            break;
        case 10:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;
            }

            break;
        case 11:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 12:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 512)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 512)";
                return false;
            }

            break;
        case 13:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;
            }

            break;
        case 14:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 15:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 16:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;
            }

            break;
        case 17:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 18:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 128)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 128)";
                return false;
            }

            break;
        case 19:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 20:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 21:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 22:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 23:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
