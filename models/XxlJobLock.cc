/**
 *
 *  XxlJobLock.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "XxlJobLock.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::xxl_job;

const std::string XxlJobLock::Cols::_lock_name = "lock_name";
const std::string XxlJobLock::primaryKeyName = "lock_name";
const bool XxlJobLock::hasPrimaryKey = true;
const std::string XxlJobLock::tableName = "xxl_job_lock";

const std::vector<typename XxlJobLock::MetaData> XxlJobLock::metaData_={
{"lock_name","std::string","varchar(50)",50,0,1,1}
};
const std::string &XxlJobLock::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
XxlJobLock::XxlJobLock(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["lock_name"].isNull())
        {
            lockName_=std::make_shared<std::string>(r["lock_name"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 1 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            lockName_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

XxlJobLock::XxlJobLock(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 1)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            lockName_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
}

XxlJobLock::XxlJobLock(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("lock_name"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["lock_name"].isNull())
        {
            lockName_=std::make_shared<std::string>(pJson["lock_name"].asString());
        }
    }
}

void XxlJobLock::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 1)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            lockName_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
}

void XxlJobLock::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("lock_name"))
    {
        if(!pJson["lock_name"].isNull())
        {
            lockName_=std::make_shared<std::string>(pJson["lock_name"].asString());
        }
    }
}

const std::string &XxlJobLock::getValueOfLockName() const noexcept
{
    static const std::string defaultValue = std::string();
    if(lockName_)
        return *lockName_;
    return defaultValue;
}
const std::shared_ptr<std::string> &XxlJobLock::getLockName() const noexcept
{
    return lockName_;
}
void XxlJobLock::setLockName(const std::string &pLockName) noexcept
{
    lockName_ = std::make_shared<std::string>(pLockName);
    dirtyFlag_[0] = true;
}
void XxlJobLock::setLockName(std::string &&pLockName) noexcept
{
    lockName_ = std::make_shared<std::string>(std::move(pLockName));
    dirtyFlag_[0] = true;
}
const typename XxlJobLock::PrimaryKeyType & XxlJobLock::getPrimaryKey() const
{
    assert(lockName_);
    return *lockName_;
}

void XxlJobLock::updateId(const uint64_t id)
{
}

const std::vector<std::string> &XxlJobLock::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "lock_name"
    };
    return inCols;
}

void XxlJobLock::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getLockName())
        {
            binder << getValueOfLockName();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> XxlJobLock::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    return ret;
}

void XxlJobLock::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getLockName())
        {
            binder << getValueOfLockName();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value XxlJobLock::toJson() const
{
    Json::Value ret;
    if(getLockName())
    {
        ret["lock_name"]=getValueOfLockName();
    }
    else
    {
        ret["lock_name"]=Json::Value();
    }
    return ret;
}

Json::Value XxlJobLock::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 1)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getLockName())
            {
                ret[pMasqueradingVector[0]]=getValueOfLockName();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getLockName())
    {
        ret["lock_name"]=getValueOfLockName();
    }
    else
    {
        ret["lock_name"]=Json::Value();
    }
    return ret;
}

bool XxlJobLock::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("lock_name"))
    {
        if(!validJsonOfField(0, "lock_name", pJson["lock_name"], err, true))
            return false;
    }
    else
    {
        err="The lock_name column cannot be null";
        return false;
    }
    return true;
}
bool XxlJobLock::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                    const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err)
{
    if(pMasqueradingVector.size() != 1)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[0] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool XxlJobLock::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("lock_name"))
    {
        if(!validJsonOfField(0, "lock_name", pJson["lock_name"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    return true;
}
bool XxlJobLock::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                  const std::vector<std::string> &pMasqueradingVector,
                                                  std::string &err)
{
    if(pMasqueradingVector.size() != 1)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool XxlJobLock::validJsonOfField(size_t index,
                                  const std::string &fieldName,
                                  const Json::Value &pJson,
                                  std::string &err,
                                  bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;
            }

            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
