/**
 *
 *  XxlJobLog.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#include <drogon/orm/BaseBuilder.h>
#ifdef __cpp_impl_coroutine
#include <drogon/orm/CoroMapper.h>
#endif
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <string_view>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

namespace drogon
{
namespace orm
{
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
}
}
namespace drogon_model
{
namespace xxl_job
{

class XxlJobLog
{
  public:
    struct Cols
    {
        static const std::string _id;
        static const std::string _job_group;
        static const std::string _job_id;
        static const std::string _executor_address;
        static const std::string _executor_handler;
        static const std::string _executor_param;
        static const std::string _executor_sharding_param;
        static const std::string _executor_fail_retry_count;
        static const std::string _trigger_time;
        static const std::string _trigger_code;
        static const std::string _trigger_msg;
        static const std::string _handle_time;
        static const std::string _handle_code;
        static const std::string _handle_msg;
        static const std::string _alarm_status;
    };

    static const int primaryKeyNumber;
    static const std::string tableName;
    static const bool hasPrimaryKey;
    static const std::string primaryKeyName;
    using PrimaryKeyType = int64_t;
    const PrimaryKeyType &getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names,
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all
     * columns by an asterisk), please set the offset to -1.
     */
    explicit XxlJobLog(const drogon::orm::Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit XxlJobLog(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    XxlJobLog(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    XxlJobLog() = default;

    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err);
    static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    static bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson,
                          std::string &err,
                          bool isForCreation);

    /**  For column id  */
    ///Get the value of the column id, returns the default value if the column is null
    const int64_t &getValueOfId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int64_t> &getId() const noexcept;
    ///Set the value of the column id
    void setId(const int64_t &pId) noexcept;

    /**  For column job_group  */
    ///Get the value of the column job_group, returns the default value if the column is null
    const int32_t &getValueOfJobGroup() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getJobGroup() const noexcept;
    ///Set the value of the column job_group
    void setJobGroup(const int32_t &pJobGroup) noexcept;

    /**  For column job_id  */
    ///Get the value of the column job_id, returns the default value if the column is null
    const int32_t &getValueOfJobId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getJobId() const noexcept;
    ///Set the value of the column job_id
    void setJobId(const int32_t &pJobId) noexcept;

    /**  For column executor_address  */
    ///Get the value of the column executor_address, returns the default value if the column is null
    const std::string &getValueOfExecutorAddress() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getExecutorAddress() const noexcept;
    ///Set the value of the column executor_address
    void setExecutorAddress(const std::string &pExecutorAddress) noexcept;
    void setExecutorAddress(std::string &&pExecutorAddress) noexcept;
    void setExecutorAddressToNull() noexcept;

    /**  For column executor_handler  */
    ///Get the value of the column executor_handler, returns the default value if the column is null
    const std::string &getValueOfExecutorHandler() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getExecutorHandler() const noexcept;
    ///Set the value of the column executor_handler
    void setExecutorHandler(const std::string &pExecutorHandler) noexcept;
    void setExecutorHandler(std::string &&pExecutorHandler) noexcept;
    void setExecutorHandlerToNull() noexcept;

    /**  For column executor_param  */
    ///Get the value of the column executor_param, returns the default value if the column is null
    const std::string &getValueOfExecutorParam() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getExecutorParam() const noexcept;
    ///Set the value of the column executor_param
    void setExecutorParam(const std::string &pExecutorParam) noexcept;
    void setExecutorParam(std::string &&pExecutorParam) noexcept;
    void setExecutorParamToNull() noexcept;

    /**  For column executor_sharding_param  */
    ///Get the value of the column executor_sharding_param, returns the default value if the column is null
    const std::string &getValueOfExecutorShardingParam() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getExecutorShardingParam() const noexcept;
    ///Set the value of the column executor_sharding_param
    void setExecutorShardingParam(const std::string &pExecutorShardingParam) noexcept;
    void setExecutorShardingParam(std::string &&pExecutorShardingParam) noexcept;
    void setExecutorShardingParamToNull() noexcept;

    /**  For column executor_fail_retry_count  */
    ///Get the value of the column executor_fail_retry_count, returns the default value if the column is null
    const int32_t &getValueOfExecutorFailRetryCount() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getExecutorFailRetryCount() const noexcept;
    ///Set the value of the column executor_fail_retry_count
    void setExecutorFailRetryCount(const int32_t &pExecutorFailRetryCount) noexcept;

    /**  For column trigger_time  */
    ///Get the value of the column trigger_time, returns the default value if the column is null
    const ::trantor::Date &getValueOfTriggerTime() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getTriggerTime() const noexcept;
    ///Set the value of the column trigger_time
    void setTriggerTime(const ::trantor::Date &pTriggerTime) noexcept;
    void setTriggerTimeToNull() noexcept;

    /**  For column trigger_code  */
    ///Get the value of the column trigger_code, returns the default value if the column is null
    const int32_t &getValueOfTriggerCode() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getTriggerCode() const noexcept;
    ///Set the value of the column trigger_code
    void setTriggerCode(const int32_t &pTriggerCode) noexcept;

    /**  For column trigger_msg  */
    ///Get the value of the column trigger_msg, returns the default value if the column is null
    const std::string &getValueOfTriggerMsg() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getTriggerMsg() const noexcept;
    ///Set the value of the column trigger_msg
    void setTriggerMsg(const std::string &pTriggerMsg) noexcept;
    void setTriggerMsg(std::string &&pTriggerMsg) noexcept;
    void setTriggerMsgToNull() noexcept;

    /**  For column handle_time  */
    ///Get the value of the column handle_time, returns the default value if the column is null
    const ::trantor::Date &getValueOfHandleTime() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getHandleTime() const noexcept;
    ///Set the value of the column handle_time
    void setHandleTime(const ::trantor::Date &pHandleTime) noexcept;
    void setHandleTimeToNull() noexcept;

    /**  For column handle_code  */
    ///Get the value of the column handle_code, returns the default value if the column is null
    const int32_t &getValueOfHandleCode() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getHandleCode() const noexcept;
    ///Set the value of the column handle_code
    void setHandleCode(const int32_t &pHandleCode) noexcept;

    /**  For column handle_msg  */
    ///Get the value of the column handle_msg, returns the default value if the column is null
    const std::string &getValueOfHandleMsg() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getHandleMsg() const noexcept;
    ///Set the value of the column handle_msg
    void setHandleMsg(const std::string &pHandleMsg) noexcept;
    void setHandleMsg(std::string &&pHandleMsg) noexcept;
    void setHandleMsgToNull() noexcept;

    /**  For column alarm_status  */
    ///Get the value of the column alarm_status, returns the default value if the column is null
    const int8_t &getValueOfAlarmStatus() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int8_t> &getAlarmStatus() const noexcept;
    ///Set the value of the column alarm_status
    void setAlarmStatus(const int8_t &pAlarmStatus) noexcept;


    static size_t getColumnNumber() noexcept {  return 15;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
    /// Relationship interfaces
  private:
    friend drogon::orm::Mapper<XxlJobLog>;
    friend drogon::orm::BaseBuilder<XxlJobLog, true, true>;
    friend drogon::orm::BaseBuilder<XxlJobLog, true, false>;
    friend drogon::orm::BaseBuilder<XxlJobLog, false, true>;
    friend drogon::orm::BaseBuilder<XxlJobLog, false, false>;
#ifdef __cpp_impl_coroutine
    friend drogon::orm::CoroMapper<XxlJobLog>;
#endif
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<int64_t> id_;
    std::shared_ptr<int32_t> jobGroup_;
    std::shared_ptr<int32_t> jobId_;
    std::shared_ptr<std::string> executorAddress_;
    std::shared_ptr<std::string> executorHandler_;
    std::shared_ptr<std::string> executorParam_;
    std::shared_ptr<std::string> executorShardingParam_;
    std::shared_ptr<int32_t> executorFailRetryCount_;
    std::shared_ptr<::trantor::Date> triggerTime_;
    std::shared_ptr<int32_t> triggerCode_;
    std::shared_ptr<std::string> triggerMsg_;
    std::shared_ptr<::trantor::Date> handleTime_;
    std::shared_ptr<int32_t> handleCode_;
    std::shared_ptr<std::string> handleMsg_;
    std::shared_ptr<int8_t> alarmStatus_;
    struct MetaData
    {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[15]={ false };
  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="select * from " + tableName + " where id = ?";
        return sql;
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="delete from " + tableName + " where id = ?";
        return sql;
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
            sql += "id,";
            ++parametersCount;
        if(dirtyFlag_[1])
        {
            sql += "job_group,";
            ++parametersCount;
        }
        if(dirtyFlag_[2])
        {
            sql += "job_id,";
            ++parametersCount;
        }
        if(dirtyFlag_[3])
        {
            sql += "executor_address,";
            ++parametersCount;
        }
        if(dirtyFlag_[4])
        {
            sql += "executor_handler,";
            ++parametersCount;
        }
        if(dirtyFlag_[5])
        {
            sql += "executor_param,";
            ++parametersCount;
        }
        if(dirtyFlag_[6])
        {
            sql += "executor_sharding_param,";
            ++parametersCount;
        }
        sql += "executor_fail_retry_count,";
        ++parametersCount;
        if(!dirtyFlag_[7])
        {
            needSelection=true;
        }
        if(dirtyFlag_[8])
        {
            sql += "trigger_time,";
            ++parametersCount;
        }
        if(dirtyFlag_[9])
        {
            sql += "trigger_code,";
            ++parametersCount;
        }
        if(dirtyFlag_[10])
        {
            sql += "trigger_msg,";
            ++parametersCount;
        }
        if(dirtyFlag_[11])
        {
            sql += "handle_time,";
            ++parametersCount;
        }
        if(dirtyFlag_[12])
        {
            sql += "handle_code,";
            ++parametersCount;
        }
        if(dirtyFlag_[13])
        {
            sql += "handle_msg,";
            ++parametersCount;
        }
        sql += "alarm_status,";
        ++parametersCount;
        if(!dirtyFlag_[14])
        {
            needSelection=true;
        }
        needSelection=true;
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";

        sql +="default,";
        if(dirtyFlag_[1])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[2])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[3])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[4])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[5])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[6])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[7])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[8])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[9])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[10])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[11])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[12])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[13])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[14])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        sql.append(1, ')');
        LOG_TRACE << sql;
        return sql;
    }
};
} // namespace xxl_job
} // namespace drogon_model
